{"files":[{"path":["/","home","runner","work","Busser","Busser","src","config.rs"],"content":"use std::path::Path;\n\nuse serde::{Serialize, Deserialize};\n\nuse crate::{filesystem::file::read_file_utf8, web::discord::request::model::Webhook};\n\n/// Configure the stats collection\n/// - ```save_period_seconds```: periodically save to disc\n/// - ```path```: where to save to disc (time-stamped files)\n/// - ```hit_cooloff_seconds```: cooloff period after which the same IP is counted as a new hit\n/// - ```clear_period_seconds```: periodcially clear data in memory\n/// - ```digest_period_seconds```: periodically send a digts to a Discord webhook\n/// - ```log_files_clear_period_seconds```:archive and clear stats log files periodically\n/// - ```ignore_regexes```: collect, but do not report, hits on these regexes\n/// - ```top_n_digest```: top n listing of pages and resources in API/discord default is 3\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct StatsConfig\n{\n    pub save_period_seconds: u64,\n    pub path: String,\n    pub hit_cooloff_seconds: u64,\n    pub digest_period_seconds: u64,\n    pub log_files_clear_period_seconds: u64,\n    pub ignore_regexes: Option<Vec<String>>,\n    pub top_n_digest: Option<usize>\n}\n\npub const CONFIG_PATH: &str = \"config.json\";\n\n/// Configure the IP throttler\n/// - ```max_requests_per_second```: includes all requests to html and resources per second per ip\n/// - ```timeout_millis```: a cool off period between IP-blocks\n/// - ```clear_period_seconds```: time period to clear all stored IPs\n#[derive(Clone, Serialize, Deserialize)]\npub struct ThrottleConfig\n{\n    pub max_requests_per_second: f64,\n    pub timeout_millis: u128,\n    pub clear_period_seconds: u64\n}\n\n/// Configure content settings\n/// - ```path```: path to site data\n/// - ```home```: path to home page served on /\n/// - ```allow_without_extension```: allow serving without .html\n/// - ```cache_period_seconds: u16```: page/resource max cache age\n/// - ```ignore_regexes: Option<Vec<String>>```: do not serve content matching any of these patterns\n#[derive(Clone, Serialize, Deserialize)]\npub struct ContentConfig\n{\n    pub path: String,\n    pub home: String,\n    pub allow_without_extension: bool,\n    pub ignore_regexes: Option<Vec<String>>,\n    pub cache_period_seconds: u16\n}\n\n/// Configure the server\n/// - ```port_https```: https port to serve on\n/// - ```port_http```: http port to serve on\n/// - ```notification_endpoint```: currently unspported Discord webhook\n/// - ```cert_path```: ssl certificate\n/// - ```key_path```: ssl key\n/// - ```domain```: domain name for https redirect etc.\n/// - ```throttle```: [ThrottleConfig]\n/// - ```stats```: [StatsConfig]\n/// - ```content```: [ContentConfig]\n/// - ```api_token```: token to use for the server's POST api\n#[derive(Clone, Serialize, Deserialize)]\npub struct Config\n{\n    pub port_https: u16,\n    pub port_http: u16,\n    pub notification_endpoint: Webhook,\n    pub cert_path: String,\n    pub key_path: String,\n    pub domain: String,\n    pub throttle: ThrottleConfig,\n    pub stats: StatsConfig,\n    pub content: ContentConfig,\n    pub api_token: String\n}\n\n#[derive(Clone)]\npub struct AppState\n{\n\n}\n\nimpl AppState\n{\n    pub fn new() -> AppState\n    {\n        AppState {}\n    } \n}\n\npub fn read_config() -> Option<Config>\n{\n    if Path::new(CONFIG_PATH).exists()\n    {\n        let data = match read_file_utf8(CONFIG_PATH)\n        {\n            Some(d) => d,\n            None =>\n            {\n                println!(\"Error reading configuration file {} no data\", CONFIG_PATH);\n                return None\n            }\n        };\n\n        let config: Config = match serde_json::from_str(&data)\n        {\n            Ok(data) => {data},\n            Err(why) => \n            {\n                println!(\"Error reading configuration file {}\\n{}\", CONFIG_PATH, why);\n                return None\n            }\n        };\n\n        Some(config)\n    }\n    else \n    {\n        println!(\"Error configuration file {} does not exist\", CONFIG_PATH);\n        None\n    }\n}","traces":[{"line":98,"address":[3454304,3455343],"length":1,"stats":{"Line":0},"fn_name":"read_config"},{"line":100,"address":[3454501,3454321],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[3481511],"length":1,"stats":{"Line":0},"fn_name":null},{"line":104,"address":[3454724],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[3461438],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[3454712],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[3481857,3481789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[3454894],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[3454959],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[3455204],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[2512815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[3454925],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[3454420],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[3454494],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":14},{"path":["/","home","runner","work","Busser","Busser","src","filesystem","file.rs"],"content":"use std::{fs::File, io::{Read, Write}};\n\npub fn write_file(path: &str, data: &[u8])\n{\n    let mut file = File::create(path).unwrap();\n    file.write_all(data).unwrap();\n}\n\npub fn read_file_utf8(path: &str) -> Option<String>\n{\n    let mut file = match File::open(path) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            return None\n        },\n        Ok(file) => file,\n    };\n\n    let mut s = String::new();\n    match file.read_to_string(&mut s) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            None\n        },\n        Ok(_) => Some(s)\n    }\n}\n\npub fn read_file_bytes(path: &str) -> Option<Vec<u8>>\n{\n    let mut file = match File::open(path) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            return None\n        },\n        Ok(file) => file,\n    };\n\n    let mut s: Vec<u8> = vec![];\n    match file.read_to_end(&mut s) {\n        Err(why) => \n        {\n            crate::debug(format!(\"error reading file to utf8, {}\", why), None);\n            None\n        },\n        Ok(_) => Some(s)\n    }\n}","traces":[{"line":3,"address":[2741424,2741903],"length":1,"stats":{"Line":0},"fn_name":"write_file"},{"line":5,"address":[2741638,2741470],"length":1,"stats":{"Line":0},"fn_name":null},{"line":6,"address":[2741642],"length":1,"stats":{"Line":0},"fn_name":null},{"line":9,"address":[2741936,2742801],"length":1,"stats":{"Line":1},"fn_name":"read_file_utf8"},{"line":11,"address":[2741969],"length":1,"stats":{"Line":1},"fn_name":null},{"line":12,"address":[2742028],"length":1,"stats":{"Line":0},"fn_name":null},{"line":14,"address":[2742871],"length":1,"stats":{"Line":0},"fn_name":null},{"line":15,"address":[2742987],"length":1,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[2741998],"length":1,"stats":{"Line":1},"fn_name":null},{"line":20,"address":[3266949],"length":1,"stats":{"Line":1},"fn_name":null},{"line":21,"address":[3267163,3267082],"length":1,"stats":{"Line":2},"fn_name":null},{"line":22,"address":[3267272],"length":1,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[3267434],"length":1,"stats":{"Line":0},"fn_name":null},{"line":25,"address":[3267572],"length":1,"stats":{"Line":0},"fn_name":null},{"line":27,"address":[2742251],"length":1,"stats":{"Line":1},"fn_name":null},{"line":31,"address":[2743024,2743893],"length":1,"stats":{"Line":1},"fn_name":"read_file_bytes"},{"line":33,"address":[2743057],"length":1,"stats":{"Line":1},"fn_name":null},{"line":34,"address":[3268048],"length":1,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[2743963],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[3269007],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3268014],"length":1,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[3268029],"length":1,"stats":{"Line":1},"fn_name":null},{"line":43,"address":[3268255,3268174],"length":1,"stats":{"Line":2},"fn_name":null},{"line":44,"address":[3268364],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3268526],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[3268664],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[3268271],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":12,"coverable":27},{"path":["/","home","runner","work","Busser","Busser","src","filesystem","folder.rs"],"content":"use core::fmt;\nuse std::fs::DirEntry;\n\nuse regex::Regex;\n\n#[derive(Debug, Clone)]\npub struct ListDirError\n{\n    pub why: String\n}\n\nimpl fmt::Display for ListDirError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.why)\n    }\n}\n\npub fn list_dir(path: String) -> Result<std::fs::ReadDir, ListDirError>\n{\n    match std::fs::read_dir(path)\n    {\n        Ok(files) => \n        {\n            Ok(files)\n        },\n        Err(why) => \n        {\n            Err(ListDirError { why: format!(\"{}\", why)})\n        }\n    }\n}\n\npub fn dir_entry_to_path(d: DirEntry) -> Option<String>\n{\n    let file_os_string = d.file_name();\n\n    match file_os_string.to_str()\n    {\n        Some(name) => Some(name.to_string()),\n        None =>\n        {\n            crate::debug(format!(\"could not load file name: {:?}\", file_os_string), None);\n            None\n        }\n    }\n}\n\npub fn list_sub_dirs(path: String) -> Vec<String>\n{\n    let mut found_dirs: Vec<String> = vec![];\n    match std::fs::read_dir(path.clone())\n    {\n        Ok(files) => \n        {\n            \n            for file in files\n            {\n                let name = match file\n                {\n                    Ok(d) => dir_entry_to_path(d),\n                    Err(e) =>\n                    {\n                        crate::debug(format!(\"could not load file name: {}\", e), None);\n                        continue\n                    }\n                };\n\n                match name \n                {\n                    Some(n) =>\n                    {\n                        let p = path.clone()+\"/\"+&n;\n                        match std::fs::metadata(p.clone())\n                        {\n                            Ok(md) =>\n                            {\n                                match md.is_dir()\n                                {\n                                    true => {found_dirs.push(p.clone()); crate::debug(format!(\"found folder: {}\", p), None)},\n                                    false => {continue}\n                                }\n                            },\n                            Err(e) =>\n                            {\n                                crate::debug(format!(\"error getting file: {}\", e), None);\n                                continue\n                            }\n                        }\n                    },\n                    None => continue\n                }\n            } \n        },\n        Err(why) => \n        {\n            crate::debug(format!(\"Error reading dir {}\\n {}\", path, why), None); \n        }\n    }\n\n    found_dirs\n}\n\npub fn list_dir_by(pattern: Option<Regex>, path: String) -> Vec<String>\n{\n    match std::fs::read_dir(path.clone())\n    {\n        Ok(files) => \n        {\n            let mut found_files: Vec<String> = vec![];\n            for file in files \n            {\n                \n                let file_name = match file\n                {\n                    Ok(d) => dir_entry_to_path(d),\n                    Err(e) =>\n                    {\n                        crate::debug(format!(\"could not load file name: {}\", e), None);\n                        continue\n                    }\n                };\n\n                let file_path = match file_name\n                {\n                    Some(name) => path.clone() + \"/\" + &name,\n                    None => continue\n                };\n            \n                if pattern.clone().is_some()\n                {\n                    match pattern.clone().unwrap().captures(&file_path)\n                    {\n                        Some(_caps) => {found_files.push(file_path.to_string())},\n                        None => {continue}\n                    }\n                }\n                else\n                {\n                    found_files.push(file_path.to_string())\n                }\n            }\n\n            return found_files\n        },\n        Err(why) => \n        {\n            crate::debug(format!(\"Error reading dir {}\\n {}\", path, why), None); \n        }\n    }\n    vec![]\n}","traces":[{"line":13,"address":[3274192],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":14,"address":[3274247],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[3274320,3274722],"length":1,"stats":{"Line":0},"fn_name":"list_dir"},{"line":20,"address":[3274337],"length":1,"stats":{"Line":0},"fn_name":null},{"line":22,"address":[3274375],"length":1,"stats":{"Line":0},"fn_name":null},{"line":24,"address":[3274407],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[3274432],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[3274576],"length":1,"stats":{"Line":0},"fn_name":null},{"line":33,"address":[3274752,3275302],"length":1,"stats":{"Line":2},"fn_name":"dir_entry_to_path"},{"line":35,"address":[3274774],"length":1,"stats":{"Line":2},"fn_name":null},{"line":37,"address":[3274901,3274836],"length":1,"stats":{"Line":4},"fn_name":null},{"line":39,"address":[3275247,3275035],"length":1,"stats":{"Line":4},"fn_name":null},{"line":42,"address":[3275085],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[3275213],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[3275328,3277315,3277866],"length":1,"stats":{"Line":2},"fn_name":"list_sub_dirs"},{"line":50,"address":[3275359],"length":1,"stats":{"Line":2},"fn_name":null},{"line":51,"address":[3275438,3275498],"length":1,"stats":{"Line":4},"fn_name":null},{"line":53,"address":[3275550],"length":1,"stats":{"Line":2},"fn_name":null},{"line":56,"address":[3275586,3275724],"length":1,"stats":{"Line":4},"fn_name":null},{"line":58,"address":[3275872],"length":1,"stats":{"Line":2},"fn_name":null},{"line":60,"address":[3275979],"length":1,"stats":{"Line":2},"fn_name":null},{"line":61,"address":[3276054],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[3277400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3276148],"length":1,"stats":{"Line":2},"fn_name":null},{"line":70,"address":[3276195],"length":1,"stats":{"Line":2},"fn_name":null},{"line":72,"address":[3277324,3276290,3276227],"length":1,"stats":{"Line":4},"fn_name":null},{"line":73,"address":[3276516,3276445],"length":1,"stats":{"Line":4},"fn_name":null},{"line":75,"address":[3276602],"length":1,"stats":{"Line":2},"fn_name":null},{"line":77,"address":[3276765,3276609],"length":1,"stats":{"Line":4},"fn_name":null},{"line":79,"address":[3276793,3276930],"length":1,"stats":{"Line":2},"fn_name":null},{"line":83,"address":[3276623],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[3277148],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[3275620],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3277705],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[3275922],"length":1,"stats":{"Line":2},"fn_name":null},{"line":103,"address":[3277888,3280555,3279931],"length":1,"stats":{"Line":2},"fn_name":"list_dir_by"},{"line":105,"address":[3278017,3277938],"length":1,"stats":{"Line":4},"fn_name":null},{"line":107,"address":[3278069],"length":1,"stats":{"Line":2},"fn_name":null},{"line":109,"address":[3278107],"length":1,"stats":{"Line":2},"fn_name":null},{"line":110,"address":[3278358,3278264],"length":1,"stats":{"Line":4},"fn_name":null},{"line":113,"address":[3278503],"length":1,"stats":{"Line":2},"fn_name":null},{"line":115,"address":[3278673],"length":1,"stats":{"Line":2},"fn_name":null},{"line":116,"address":[3278748],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[3280016],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[3278842],"length":1,"stats":{"Line":2},"fn_name":null},{"line":125,"address":[3278889,3279940],"length":1,"stats":{"Line":2},"fn_name":null},{"line":129,"address":[3279166,3279229],"length":1,"stats":{"Line":4},"fn_name":null},{"line":131,"address":[3279423,3279555,3279642],"length":1,"stats":{"Line":6},"fn_name":null},{"line":133,"address":[3279694,3279819],"length":1,"stats":{"Line":2},"fn_name":null},{"line":139,"address":[3279357],"length":1,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[3278557],"length":1,"stats":{"Line":2},"fn_name":null},{"line":145,"address":[3278137],"length":1,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[3280340],"length":1,"stats":{"Line":0},"fn_name":null},{"line":150,"address":[3280506],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":32,"coverable":54},{"path":["/","home","runner","work","Busser","Busser","src","filesystem","mod.rs"],"content":"pub mod file;\npub mod folder;","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","src","lib.rs"],"content":"use semver::{BuildMetadata, Prerelease, Version};\n\npub mod web;\npub mod server;\npub mod util;\npub mod pages;\npub mod resources;\npub mod config;\npub mod filesystem;\n\nconst MAJOR: &str = env!(\"CARGO_PKG_VERSION_MAJOR\");\nconst MINOR: &str = env!(\"CARGO_PKG_VERSION_MINOR\");\nconst PATCH: &str = env!(\"CARGO_PKG_VERSION_PATCH\");\n\nconst RESOURCE_REGEX: &str = r\"(\\.\\S+)\";\nconst HTML_REGEX: &str = r\"(\\.html)$\";\nconst NO_EXTENSION_REGEX: &str = r\"^(?!.*\\.).*\";\n\n// only modified in main.rs on launch\npub struct RuntimeOptions\n{\n    pub debug: bool,\n    pub debug_timestamp: bool\n}\n\npub static mut OPTIONS: RuntimeOptions = RuntimeOptions { debug: false, debug_timestamp: false };\n\npub fn debug(msg: String, context: Option<String>)\n{\n    unsafe { if OPTIONS.debug == false { return } }\n\n    let mut message = String::new();\n\n    let time = chrono::offset::Utc::now().to_rfc3339();\n\n\n\n    let tag = match context\n    {\n        Some(s) => format!(\"[{s}] \"),\n        None => format!(\"[DEBUG] \")\n    };\n\n    for line in msg.split(\"\\n\")\n    {\n        unsafe { if OPTIONS.debug_timestamp { message.push_str(&format!(\"{time} \")); } }\n        message.push_str(&tag);\n        message.push_str(line);\n        message.push_str(\"\\n\");\n    }\n\n    print!(\"{message}\");\n}\n\npub fn program_version() -> Version \n{\n    Version\n    {\n        major: MAJOR.parse().unwrap(),\n        minor: MINOR.parse().unwrap(),\n        patch: PATCH.parse().unwrap(),\n        pre: Prerelease::EMPTY,\n        build: BuildMetadata::EMPTY\n    }\n}","traces":[{"line":26,"address":[7271793],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[2976208,2978013,2977915],"length":1,"stats":{"Line":1},"fn_name":"debug"},{"line":30,"address":[2895271],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[22617179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[2895468,2895408],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[2895503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[2895823,2895571],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[20345908],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[22784414],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[2896351,2896647],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[22784528],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[2896916],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[2896923],"length":1,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[2896383],"length":1,"stats":{"Line":0},"fn_name":null},{"line":55,"address":[2897072],"length":1,"stats":{"Line":0},"fn_name":"program_version"},{"line":59,"address":[3850367,3839223,3849566,3841995,3844521,3848519,3851291,3840147,3845993,3843720,3852050,3838422,3842796,3840948,3847718,3846794],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[2897241],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[2897392],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":2,"coverable":18},{"path":["/","home","runner","work","Busser","Busser","src","main.rs"],"content":"use busser::server::http::ServerHttp;\nuse busser::server::https::Server;\nuse busser::program_version;\n\nuse tokio::task::spawn;\n\n#[tokio::main]\nasync fn main() {\n\n    let args: Vec<String> = std::env::args().collect();\n \n    if args.iter().any(|x| x == \"-v\")\n    {\n        println!(\"Version: {}\", program_version());\n        std::process::exit(0);\n    }\n\n    if args.iter().any(|x| x == \"-d\")\n    {\n        unsafe { busser::OPTIONS.debug = true; }\n    }\n\n    if args.iter().any(|x| x == \"-t\")\n    {\n        unsafe { busser::OPTIONS.debug_timestamp = true; }\n    }\n\n    let insert_tag = if args.iter().any(|x| x == \"--no-tagging\")\n    {\n        false\n    }\n    else\n    {\n        true\n    };\n    \n    let server = Server::new(0,0,0,0, insert_tag);\n\n    let http_server = ServerHttp::new(0,0,0,0);\n\n    let _http_redirect = spawn(http_server.serve());\n\n    server.serve().await;\n\n}","traces":[{"line":8,"address":[3296416,3296016],"length":1,"stats":{"Line":0},"fn_name":"main"},{"line":10,"address":[3141391,3141518],"length":1,"stats":{"Line":0},"fn_name":null},{"line":12,"address":[3143280,3141657,3143294,3141548],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":14,"address":[3141793,3142757],"length":1,"stats":{"Line":0},"fn_name":null},{"line":15,"address":[3142906],"length":1,"stats":{"Line":0},"fn_name":null},{"line":18,"address":[3143328,3143342,3141831,3141751,3141974],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":20,"address":[3141964],"length":1,"stats":{"Line":0},"fn_name":null},{"line":23,"address":[3141925,3141989,3142112,3143376,3143390],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":25,"address":[3142101],"length":1,"stats":{"Line":0},"fn_name":null},{"line":28,"address":[3142065,3143424,3143438,3142124],"length":1,"stats":{"Line":0},"fn_name":"{closure#3}"},{"line":34,"address":[3142194],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[3142208,3142289],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3142304],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3142380],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[3141373,3142986,3141455,3142466,3142607],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":15},{"path":["/","home","runner","work","Busser","Busser","src","pages","mod.rs"],"content":"use regex::Regex;\n\nuse crate::{filesystem::folder::{list_dir_by, list_sub_dirs}, HTML_REGEX, filesystem::file::read_file_utf8};\nuse self::page::Page;\n\npub mod page;\n\n/// Scan the path (if None the current dir) for .html pages\n///   note Busser can be configured to server .html pages without\n///   the extension, but for scanning the extension is required.\n/// \n/// # Example\n/// ```rust\n/// // with files pages/index.html, pages/animation.js\n/// \n/// use busser::pages::{get_pages, page::Page};\n/// \n/// pub fn main()\n/// {\n///     let pages = get_pages(Some(\"pages\"), Some(3600));\n/// \n///     // assert_eq!(pages.len(), 1);\n///     // assert!(pages.contains(&Page::new(\"pages/index.html\", \"\")));\n///     // assert!(!pages.contains(&Page::new(\"pages/animation.js\", \"\")));\n/// }\n/// ``` \npub fn get_pages(path: Option<&str>, cache_period_seconds: Option<u16>) -> Vec<Page>\n{\n    let scan_path = match path\n    {\n        Some(s) => s,\n        None => \"\"\n    };\n\n    let html_regex = Regex::new(HTML_REGEX).unwrap();\n    let page_paths = list_dir_by(Some(html_regex), scan_path.to_string());\n    let mut pages: Vec<Page> = vec![];\n\n    let cache = match cache_period_seconds\n    {\n        Some(p) => p,\n        None => 3600\n    };\n\n    for page_path in page_paths\n    {\n        let data = match read_file_utf8(&page_path)\n        {\n            Some(data) => data,\n            None => continue\n        };\n\n        pages.push(Page::new(page_path.as_str(), data.as_str(), cache));\n    }\n\n    let dirs = list_sub_dirs(scan_path.to_string());\n\n    if !dirs.is_empty()\n    {\n        for dir in dirs\n        {\n            for page in get_pages(Some(&dir), cache_period_seconds)\n            {\n                pages.push(page);\n            }\n        }\n    }\n\n    pages\n\n}","traces":[{"line":27,"address":[3186267,3184224,3186800],"length":1,"stats":{"Line":1},"fn_name":"get_pages"},{"line":29,"address":[2496674],"length":1,"stats":{"Line":1},"fn_name":null},{"line":31,"address":[2496761],"length":1,"stats":{"Line":1},"fn_name":null},{"line":32,"address":[2496732],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[4664982],"length":1,"stats":{"Line":1},"fn_name":null},{"line":36,"address":[2499154,2497042],"length":1,"stats":{"Line":1},"fn_name":null},{"line":37,"address":[4665389],"length":1,"stats":{"Line":1},"fn_name":null},{"line":39,"address":[3184873],"length":1,"stats":{"Line":1},"fn_name":null},{"line":41,"address":[3184907],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[2497287],"length":1,"stats":{"Line":1},"fn_name":null},{"line":45,"address":[3185039,3184931],"length":1,"stats":{"Line":2},"fn_name":null},{"line":47,"address":[3186408,3185268],"length":1,"stats":{"Line":2},"fn_name":null},{"line":49,"address":[3186484],"length":1,"stats":{"Line":1},"fn_name":null},{"line":53,"address":[3186645,3186556],"length":1,"stats":{"Line":2},"fn_name":null},{"line":56,"address":[2497664],"length":1,"stats":{"Line":1},"fn_name":null},{"line":58,"address":[3185354,3185422],"length":1,"stats":{"Line":2},"fn_name":null},{"line":60,"address":[3185562,3185428],"length":1,"stats":{"Line":2},"fn_name":null},{"line":62,"address":[3185794,3185865],"length":1,"stats":{"Line":2},"fn_name":null},{"line":64,"address":[3186262,3186213],"length":1,"stats":{"Line":2},"fn_name":null},{"line":69,"address":[3185500],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":18,"coverable":20},{"path":["/","home","runner","work","Busser","Busser","src","pages","page.rs"],"content":"use std::cmp::min;\n\nuse axum::response::{IntoResponse, Response, Html};\nuse regex::Regex;\nuse serde::{Serialize, Deserialize};\n\nuse crate::filesystem::file::read_file_utf8;\n\n/// An HTML webpage with a uri and body\n/// \n/// A Page may also be converted into an Axum HTML response via\n/// ```rust page.into_response()```\n/// # Example\n/// ```rust\n/// use busser::pages::page::Page;\n/// \n/// pub fn main()\n/// {\n/// \n///     let page = Page::new(\"index.html\", \"<p>Welcome!</p>\", 3600);\n/// \n///     println!(\"{}\",page.preview(64));\n/// }\n/// ``` \n#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\npub struct Page\n{\n    uri: String,\n    body: String,\n    cache_period_seconds: u16\n}\n\nimpl Page\n{\n    pub fn new(uri: &str, body: &str, cache: u16) -> Page\n    {\n        Page { uri: uri.to_string(), body: body.to_string(), cache_period_seconds: cache }\n    }\n\n    pub fn from_file(path: String, cache_period_seconds: u16) -> Option<Page>\n    {\n        match read_file_utf8(&path)\n        {\n            Some(data) => Some(Page::new(path.as_str(), data.as_str(), cache_period_seconds)),\n            None => None\n        }\n    }\n\n    pub fn error(text: &str) -> Page\n    {\n        Page::new(\"/\", text, 3600)\n    }\n\n    pub fn get_uri(&self) -> String\n    {\n        self.uri.clone()\n    }\n\n    pub fn preview(&self, n: usize) -> String\n    {\n        format!(\"uri: {}, body: {} ...\", self.get_uri(), self.body[1..min(n, self.body.len())].to_string())\n    }\n\n    /// Insert a tag indicating the page was served by busser\n    /// this may be disabled by launching as busser --no-tagging\n    pub fn insert_tag(&mut self)\n    {   \n        let head = Regex::new(r\"<head>\").unwrap();\n        let tag = r#\"<head><meta name=\"hostedby\" content=\"Busser, https://github.com/JerboaBurrow/Busser\">\"#;\n        let tag_no_head = r#\"<html><head><meta name=\"hostedby\" content=\"Busser, https://github.com/JerboaBurrow/Busser\"></head>\"#;\n        match head.clone().captures_iter(&self.body).count()\n        {\n            0 => \n            {\n                self.body = self.body.replacen(\"<html>\", tag_no_head, 1);\n            },\n            _ => \n            {\n                self.body = self.body.replacen(\"<head>\", tag, 1);\n            }\n        }\n    }\n}\n\nimpl IntoResponse for Page {\n    fn into_response(self) -> Response {\n        let mut response = Html(self.body).into_response();\n        let time_stamp = chrono::offset::Utc::now().to_rfc3339();\n        response.headers_mut().insert(\"date\", time_stamp.parse().unwrap());\n        response.headers_mut().insert(\"cache-control\", format!(\"public, max-age={}\", self.cache_period_seconds).parse().unwrap());\n        response\n    }\n}\n\npub fn is_page(uri: &str, domain: &str) -> bool\n{\n\n    let domain_escaped = domain.replace(\"https://\", \"\").replace(\"http://\", \"\").replace(\".\", r\"\\.\");\n    match Regex::new(format!(r\"((^|(http)(s|)://){})(/|/[^\\.]+|/[^\\.]+.html|$)$\",domain_escaped).as_str())\n    {\n        Ok(re) => \n        {\n            re.is_match(uri)\n        },\n        Err(_e) => {false}\n    }\n}","traces":[{"line":35,"address":[3016710,3016496],"length":1,"stats":{"Line":1},"fn_name":null},{"line":37,"address":[2729701],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[2729872,2730337],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[2729986,2729918],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[2730126,2730059],"length":1,"stats":{"Line":0},"fn_name":null},{"line":45,"address":[2730039],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[2730368],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[2730395],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[3017296],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[3017313],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[3018098,3017344],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[2730617,2730902,2730523],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[2731264,2732300],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[2731326],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[2731276],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[2731297],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[2731725,2731578,2731634],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[2731768,2731828],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[3018658,3018910],"length":1,"stats":{"Line":0},"fn_name":null},{"line":86,"address":[3020550,3019200,3020519],"length":1,"stats":{"Line":0},"fn_name":"into_response"},{"line":87,"address":[3019222,3019354],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[3019362,3019419],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[3019446,3019539,3019737],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[3019795,3020283,3019903],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[3020365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[3021654,3021738,3020576],"length":1,"stats":{"Line":1},"fn_name":"is_page"},{"line":98,"address":[3020651],"length":1,"stats":{"Line":1},"fn_name":null},{"line":99,"address":[3021162,3021353],"length":1,"stats":{"Line":2},"fn_name":null},{"line":101,"address":[3021411],"length":1,"stats":{"Line":1},"fn_name":null},{"line":103,"address":[3021566,3021451],"length":1,"stats":{"Line":2},"fn_name":null},{"line":105,"address":[3021462],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":7,"coverable":31},{"path":["/","home","runner","work","Busser","Busser","src","resources","mod.rs"],"content":"pub mod resource;\n\nuse regex::Regex;\n\nuse crate::{filesystem::folder::{list_dir_by, list_sub_dirs}, HTML_REGEX, RESOURCE_REGEX, filesystem::file::read_file_bytes};\n\nuse self::resource::{content_type, Resource};\n\n/// Scan the path (if None the current dir) for non .html resources\n/// \n/// # Example\n/// ```rust\n/// // with files resources/index.html, resources/animation.js\n/// \n/// use busser::resources::{get_resources, resource::Resource};\n/// \n/// pub fn main()\n/// {\n///     let resources = get_resources(Some(\"resources\"), Some(3600));\n/// \n///     // assert_eq!(resources.len(), 1);\n///     // assert!(!resources.contains(&Resource::new(\"resources/index.html\", \"\")));\n///     // assert!(resources.contains(&Resource::new(\"resources/animation.js\", \"\")));\n/// }\n/// ``` \npub fn get_resources(path: Option<&str>, cache_period_seconds: Option<u16>) -> Vec<Resource>\n{\n    let scan_path = match path\n    {\n        Some(s) => s,\n        None => \"\"\n    };\n\n    let resource_regex = Regex::new(RESOURCE_REGEX).unwrap();\n    let html_regex = Regex::new(HTML_REGEX).unwrap();\n\n    let resource_paths = list_dir_by(Some(resource_regex), scan_path.to_string());\n    let mut resources: Vec<Resource> = vec![];\n\n    let cache = match cache_period_seconds\n    {\n        Some(p) => p,\n        None => 3600\n    };\n\n    for resource_path in resource_paths\n    {\n        match html_regex.find_iter(resource_path.as_str()).count()\n        {\n            0 => {},\n            _ => {continue}\n        }\n\n        let data = match read_file_bytes(&resource_path)\n        {\n            Some(data) => data,\n            None => continue\n        };\n\n        resources.push(Resource::new(resource_path.as_str(), data, content_type(resource_path.to_string()), cache));\n    }\n\n    let dirs = list_sub_dirs(scan_path.to_string());\n\n    if !dirs.is_empty()\n    {\n        for dir in dirs\n        {\n            for resource in get_resources(Some(&dir), cache_period_seconds)\n            {\n                resources.push(resource);\n            }\n        }\n    }\n\n    resources\n\n}","traces":[{"line":26,"address":[3045584,3048099,3049003],"length":1,"stats":{"Line":1},"fn_name":"get_resources"},{"line":28,"address":[3045643],"length":1,"stats":{"Line":1},"fn_name":null},{"line":30,"address":[3045757],"length":1,"stats":{"Line":1},"fn_name":null},{"line":31,"address":[3045728],"length":1,"stats":{"Line":0},"fn_name":null},{"line":34,"address":[3046044,3045805],"length":1,"stats":{"Line":2},"fn_name":null},{"line":35,"address":[3046052],"length":1,"stats":{"Line":1},"fn_name":null},{"line":37,"address":[3046415,3048984],"length":1,"stats":{"Line":1},"fn_name":null},{"line":38,"address":[2871558],"length":1,"stats":{"Line":1},"fn_name":null},{"line":40,"address":[2871606],"length":1,"stats":{"Line":1},"fn_name":null},{"line":42,"address":[2871640],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[2871628],"length":1,"stats":{"Line":1},"fn_name":null},{"line":46,"address":[2871768,2871664],"length":1,"stats":{"Line":2},"fn_name":null},{"line":48,"address":[3047081,3048286],"length":1,"stats":{"Line":2},"fn_name":null},{"line":54,"address":[2873188,2873245],"length":1,"stats":{"Line":2},"fn_name":null},{"line":56,"address":[2873297],"length":1,"stats":{"Line":1},"fn_name":null},{"line":60,"address":[2873455,2873377,2873717],"length":1,"stats":{"Line":2},"fn_name":null},{"line":63,"address":[2872005],"length":1,"stats":{"Line":1},"fn_name":null},{"line":65,"address":[2872131,2872075],"length":1,"stats":{"Line":2},"fn_name":null},{"line":67,"address":[2872137,2872270],"length":1,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[2872490,2872561],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[2872950,2872921],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[2872208],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":17,"coverable":22},{"path":["/","home","runner","work","Busser","Busser","src","resources","resource.rs"],"content":"use std::{cmp::min, collections::HashMap};\n\nuse axum::response::{Html, IntoResponse, Response};\nuse regex::Regex;\nuse serde::{Serialize, Deserialize};\n\n/// An non-HTML resource with a uri, byte body, and MIME type\n/// \n/// A resource may also be converted into an Axum HTML response via\n/// ```rust resource.into_response()```\n/// # Example\n/// ```rust\n/// use busser::resources::resource::Resource;\n/// \n/// pub fn main()\n/// {\n/// \n///     let res = Resource::new\n///     (\n///         \"index.js\", \n///         \"console.log(\\\"Hello, World!\\\")\".as_bytes().to_vec(), \n///         \"text/javascript\",\n///         3600\n///     );\n/// \n///     println!(\"{}\",res.preview(64));\n/// }\n/// ``` \n#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\npub struct Resource\n{\n    uri: String,\n    body: Vec<u8>,\n    content_type: String,\n    cache_period_seconds: u16\n}\n\n/// Identifies the MIME type by file extension, no attempt is made to verify the file's content\n/// \n/// Supported MIME types in Busser, default is ```not-rust \"application/octet-stream\"```\n/// ```rust\n/// use std::collections::HashMap;\n/// let content_types = HashMap::from\n/// ( \n///     [\n///         (r\"\\.txt$\", \"text/plain\"),\n///         (r\"\\.css$\", \"text/css\"),\n///         (r\"\\.csv$\", \"text/csv\"),\n///         (r\"\\.(javascript|js)$\", \"text/javascript\"),\n///         (r\"\\.xml$\", \"text/xml\"),\n///         (r\"\\.gif$\", \"image/gif\"),   \n///         (r\"\\.(jpg|jpeg)$\", \"image/jpeg\"),   \n///         (r\"\\.png$\", \"image/png\"),   \n///         (r\"\\.tiff$\", \"image/tiff\"),      \n///         (r\"\\.ico$\", \"image/x-icon\"),  \n///         (r\"\\.(djvu)|(djv)$\", \"image/vnd.djvu\"),  \n///         (r\"\\.svg$\", \"image/svg+xml\"),\n///         (r\"\\.(mpeg|mpg|mp2|mpe|mpv|m2v)$\", \"video/mpeg\"),    \n///         (r\"\\.(mp4|m4v)$\", \"video/mp4\"),    \n///         (r\"\\.(qt|mov)$\", \"video/quicktime\"),    \n///         (r\"\\.(wmv)$\", \"video/x-ms-wmv\"),    \n///         (r\"\\.(flv|f4v|f4p|f4a|f4b)$\", \"video/x-flv\"),   \n///         (r\"\\.webm$\", \"video/webm\")    \n///     ]\n/// );\n/// ```\npub fn content_type(extension: String) -> &'static str\n{\n    let content_types = HashMap::from\n    ( \n        [\n            (r\"\\.txt$\", \"text/plain\"),\n            (r\"\\.css$\", \"text/css\"),\n            (r\"\\.csv$\", \"text/csv\"),\n            (r\"\\.(javascript|js)$\", \"text/javascript\"),\n            (r\"\\.xml$\", \"text/xml\"),\n            (r\"\\.gif$\", \"image/gif\"),   \n            (r\"\\.(jpg|jpeg)$\", \"image/jpeg\"),   \n            (r\"\\.png$\", \"image/png\"),   \n            (r\"\\.tiff$\", \"image/tiff\"),      \n            (r\"\\.ico$\", \"image/x-icon\"),  \n            (r\"\\.(djvu)|(djv)$\", \"image/vnd.djvu\"),  \n            (r\"\\.svg$\", \"image/svg+xml\"),\n            (r\"\\.(mpeg|mpg|mp2|mpe|mpv|m2v)$\", \"video/mpeg\"),    \n            (r\"\\.(mp4|m4v)$\", \"video/mp4\"),    \n            (r\"\\.(qt|mov)$\", \"video/quicktime\"),    \n            (r\"\\.(wmv)$\", \"video/x-ms-wmv\"),    \n            (r\"\\.(flv|f4v|f4p|f4a|f4b)$\", \"video/x-flv\"),   \n            (r\"\\.webm$\", \"video/webm\")    \n        ]\n    );\n\n    for (re, content) in content_types\n    {\n        if Regex::new(re).unwrap().is_match(&extension)\n        {\n            return content\n        }\n    }\n\n    \"application/octet-stream\"\n}\n\nimpl Resource\n{\n    pub fn new(uri: &str, body: Vec<u8>, content_type: &str, cache: u16) -> Resource\n    {\n        Resource { uri: uri.to_string(), body, content_type: content_type.to_string(), cache_period_seconds: cache }\n    }\n\n    pub fn get_uri(&self) -> String\n    {\n        self.uri.clone()\n    }\n\n    pub fn get_bytes(&self) -> Vec<u8>\n    {\n        self.body.clone()\n    }\n\n    pub fn preview(&self, n: usize) -> String\n    {\n        let preview_body = match self.body.len() > 0\n        {\n            true => self.body[1..min(n, self.body.len())].to_vec(),\n            false => vec![]\n        };\n\n        format!(\"uri: {}, type: {}, bytes: {:?} ...\", self.get_uri(), self.content_type, preview_body)\n    }\n}\n\n/// Serves an Html response with the given MIME type\nimpl IntoResponse for Resource {\n    fn into_response(self) -> Response {\n        let mut response = Html(self.body).into_response();\n        response.headers_mut().insert(\"content-type\", self.content_type.parse().unwrap());\n        let time_stamp = chrono::offset::Utc::now().to_rfc3339();\n        response.headers_mut().insert(\"date\", time_stamp.parse().unwrap());\n        response.headers_mut().insert(\"cache-control\", format!(\"public, max-age={}\", self.cache_period_seconds).parse().unwrap());\n        response\n    }\n}","traces":[{"line":67,"address":[3033168,3035579],"length":1,"stats":{"Line":1},"fn_name":"content_type"},{"line":72,"address":[3033180],"length":1,"stats":{"Line":1},"fn_name":null},{"line":73,"address":[3033234],"length":1,"stats":{"Line":1},"fn_name":null},{"line":74,"address":[3033288],"length":1,"stats":{"Line":1},"fn_name":null},{"line":75,"address":[3033342],"length":1,"stats":{"Line":1},"fn_name":null},{"line":76,"address":[3033396],"length":1,"stats":{"Line":1},"fn_name":null},{"line":77,"address":[3033450],"length":1,"stats":{"Line":1},"fn_name":null},{"line":78,"address":[3033504],"length":1,"stats":{"Line":1},"fn_name":null},{"line":79,"address":[3033558],"length":1,"stats":{"Line":1},"fn_name":null},{"line":80,"address":[3033612],"length":1,"stats":{"Line":1},"fn_name":null},{"line":81,"address":[3033666],"length":1,"stats":{"Line":1},"fn_name":null},{"line":82,"address":[3033720],"length":1,"stats":{"Line":1},"fn_name":null},{"line":83,"address":[3033774],"length":1,"stats":{"Line":1},"fn_name":null},{"line":84,"address":[3033828],"length":1,"stats":{"Line":1},"fn_name":null},{"line":85,"address":[3033882],"length":1,"stats":{"Line":1},"fn_name":null},{"line":86,"address":[3033936],"length":1,"stats":{"Line":1},"fn_name":null},{"line":87,"address":[3033990],"length":1,"stats":{"Line":1},"fn_name":null},{"line":88,"address":[3034044],"length":1,"stats":{"Line":1},"fn_name":null},{"line":89,"address":[3034098],"length":1,"stats":{"Line":1},"fn_name":null},{"line":93,"address":[3035544,3034793],"length":1,"stats":{"Line":2},"fn_name":null},{"line":95,"address":[3035383,3035056],"length":1,"stats":{"Line":2},"fn_name":null},{"line":97,"address":[3035534],"length":1,"stats":{"Line":1},"fn_name":null},{"line":101,"address":[3035080],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[3035616,3035962,3035990],"length":1,"stats":{"Line":1},"fn_name":null},{"line":108,"address":[3035777,3035693,3035971],"length":1,"stats":{"Line":2},"fn_name":null},{"line":111,"address":[3036032],"length":1,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[3036049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[3036080],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[3036097],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[3036128,3036969],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[3036179],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[3036216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[3036195],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[3036727,3036328,3036466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":135,"address":[3038721,3036992],"length":1,"stats":{"Line":0},"fn_name":"into_response"},{"line":136,"address":[3037023,3037158],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[3037166,3037464,3037259],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[3037522],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[3037664,3037862,3037568],"length":1,"stats":{"Line":0},"fn_name":null},{"line":140,"address":[3037920,3038031,3038408],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[3038493],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":24,"coverable":41},{"path":["/","home","runner","work","Busser","Busser","src","server","api","mod.rs"],"content":"pub mod stats;\n\nuse std::sync::Arc;\n\nuse axum::{\n    body::Bytes, extract::State, http::{HeaderMap, Request}, middleware::Next, response::Response\n};\nuse reqwest::StatusCode;\nuse tokio::sync::Mutex;\n\nuse crate::web::stats::Stats;\n\n/// A trait representing an API request to the server\n///  - For example [crate::server::api::stats::StatsDigest]\npub trait ApiRequest\n{\n    /// Validate a request's hmac given a token read from config.json \n    ///   - See [crate::config::Config] and [crate::web::is_authentic]\n    fn is_authentic(headers: HeaderMap, body: Bytes) -> StatusCode;\n    /// Deserialise the Bytes body from JSON\n    fn deserialise_payload(&mut self, headers: HeaderMap, body: Bytes) -> StatusCode;\n    /// Formulate a response form the server returned as a String\n    ///   - Also perform any actions inherent to this Api call\n    async fn into_response(&self, stats: Option<Stats>) -> (Option<String>, StatusCode);\n    /// Axum middleware to \n    ///     1. check headers for an api request type\n    ///     2. authenticate the request (HMAC)\n    ///     3. respond to it\n    ///     4. continue on to the next reqeust\n    async fn filter<B>\n    (\n        stats: State<Option<Arc<Mutex<Stats>>>>,\n        headers: HeaderMap,\n        request: Request<B>,\n        next: Next<B>\n    ) -> Result<Response, StatusCode>\n    where B: axum::body::HttpBody<Data = Bytes>;\n\n}","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","src","server","api","stats.rs"],"content":"use std::{str::from_utf8, sync::Arc};\n\nuse axum::{body::Bytes, extract::State, http::{HeaderMap, Request}, middleware::Next, response::{IntoResponse, Response}};\nuse chrono::DateTime;\nuse reqwest::StatusCode;\nuse serde::Deserialize;\nuse tokio::sync::Mutex;\n\nuse crate::{config::read_config, web::{discord::request::post::post, is_authentic, stats::{self, Stats}}};\n\nuse super::ApiRequest;\n\n/// Payload for [StatsDigest] Api request\n///  - ```from_utc```: takes a utc date to compile statistics from\n///  - ```to_utc```: takes a utc date to compile statistics to\n///  - ```post_discord```: whether to post to dicsord or not\n#[derive(Deserialize)]\npub struct StatsDigestPayload\n{\n    from_utc: Option<String>,\n    to_utc: Option<String>,\n    post_discord: bool\n}\n\n/// Payload for [StatsDigest] Api request, see [StatsDigestPayload]\n///  - Takes a utc date to compile statistics from, and a switch to post a discord message\n///  - All saved hit statistics after from_utc will be included\npub struct StatsDigest \n{\n    payload: StatsDigestPayload\n}\n\nimpl StatsDigest\n{\n    pub fn new() -> StatsDigest\n    {\n        StatsDigest \n        { \n            payload: StatsDigestPayload \n            {\n                from_utc: None,\n                to_utc: None,\n                post_discord: false\n            } \n        }\n    }\n}\n\nimpl ApiRequest for StatsDigest\n{\n    fn is_authentic(headers: HeaderMap, body: Bytes) -> StatusCode\n    {\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                return StatusCode::INTERNAL_SERVER_ERROR;\n            }\n        };\n\n        is_authentic\n        (\n            headers, \n            \"busser-token\", \n            config.api_token, \n            body\n        )\n    }\n\n    fn deserialise_payload(&mut self, _headers: HeaderMap, body: Bytes) -> StatusCode\n    {\n        \n        self.payload = match from_utf8(&body)\n        {\n            Ok(s) => \n            {\n                match serde_json::from_str(s)\n                {\n                    Ok(p) => p,\n                    Err(e) =>\n                    {\n                        crate::debug(format!(\"{} deserialising POST payload\",e), Some(\"Stats Digest\".to_string()));\n                        return StatusCode::BAD_REQUEST\n                    }\n                }\n            }\n            Err(e) => \n            {\n                crate::debug(format!(\"{} deserialising POST payload\",e), Some(\"Stats Digest\".to_string()));\n                return StatusCode::BAD_REQUEST\n            }\n        };\n\n        StatusCode::OK\n    }\n\n    async fn into_response(&self, stats: Option<Stats>) -> (Option<String>, StatusCode)\n    {\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                return (None, StatusCode::INTERNAL_SERVER_ERROR);\n            }\n        };\n\n        let from: Option<DateTime<chrono::Utc>> = match self.payload.from_utc.clone()\n        {\n            Some(s) =>\n            {\n                match DateTime::parse_from_rfc3339(&s)\n                {\n                    Ok(date) => Some(date.into()),\n                    Err(e) => \n                    {\n                        crate::debug(format!(\"Error {} parsing from_utc form StatsDigest POST payload\",e,), None);\n                        return (None, StatusCode::BAD_REQUEST) \n                    }\n                }\n            },\n            None => None\n        };\n\n        let to: Option<DateTime<chrono::Utc>> = match self.payload.to_utc.clone()\n        {\n            Some(s) =>\n            {\n                match DateTime::parse_from_rfc3339(&s)\n                {\n                    Ok(date) => Some(date.into()),\n                    Err(e) => \n                    {\n                        crate::debug(format!(\"Error {} parsing to_utc form StatsDigest POST payload\",e,), None);\n                        return (None, StatusCode::BAD_REQUEST) \n                    }\n                }\n            },\n            None => None\n        };\n\n        let digest = Stats::process_hits(config.stats.path, from,to,config.stats.top_n_digest,stats);\n        let msg = Stats::digest_message(digest, from, to);\n\n        if self.payload.post_discord\n        {\n            match post(config.notification_endpoint, msg.clone()).await\n            {\n                Ok(_s) => (),\n                Err(e) => {crate::debug(format!(\"Error posting to discord\\n{}\", e), None);}\n            }\n        }\n\n        (Some(msg), StatusCode::OK)\n    }\n\n    async fn filter<B>\n    (\n        State(stats): State<Option<Arc<Mutex<Stats>>>>,\n        headers: HeaderMap,\n        request: Request<B>,\n        next: Next<B>\n    ) -> Result<Response, StatusCode>\n    where B: axum::body::HttpBody<Data = Bytes>\n    {\n\n        if !headers.contains_key(\"api\")\n        {\n            return Ok(next.run(request).await)\n        }\n\n        let api = match std::str::from_utf8(headers[\"api\"].as_bytes())\n        {\n            Ok(u) => u,\n            Err(_) =>\n            {\n                crate::debug(\"no/mangled user agent\".to_string(), None);\n                return Ok(next.run(request).await)\n            }\n        };\n\n        match api == \"StatsDigest\"\n        {\n            true => {},\n            false => { return Ok(next.run(request).await) }\n        }\n\n        let body = request.into_body();\n        let bytes = match body.collect().await {\n            Ok(collected) => collected.to_bytes(),\n            Err(_) => {\n                return Err(StatusCode::BAD_REQUEST)\n            }\n        };\n\n        match StatsDigest::is_authentic(headers.clone(), bytes.clone())\n        {\n            StatusCode::ACCEPTED => {},\n            e => { return Ok(e.into_response()) }\n        }\n\n        let mut response = StatsDigest::new();\n\n        match response.deserialise_payload(headers, bytes)\n        {\n            StatusCode::OK => {},\n            e => { return Ok(e.into_response()) }\n        }\n\n        let (result, status) = if stats.is_none()\n        {\n            response.into_response(None).await\n        }\n        else\n        {\n            let stats_unwrapped = stats.unwrap();\n            let stats_lock = stats_unwrapped.lock().await;\n            let s = stats_lock.to_owned();\n            response.into_response(Some(s)).await\n        };\n        \n\n        match result\n        {\n            Some(s) => { Ok((s).into_response()) },\n            None => { Err(status) }\n        }\n    }\n\n}\n","traces":[{"line":35,"address":[3579760],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3579802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[3580816,3579904,3580972],"length":1,"stats":{"Line":0},"fn_name":"is_authentic"},{"line":54,"address":[3580021,3579921],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[3580124],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[3580052],"length":1,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[3580166],"length":1,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[3580245],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3580285],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[3581008,3582072,3582404],"length":1,"stats":{"Line":0},"fn_name":"deserialise_payload"},{"line":75,"address":[3581051,3581390,3581503,3581558,3581135],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[3581159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[3581185,3581292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[3581329],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[3581404],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3581742,3582050],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[3582005],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[3581201],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[3582091,3582382],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[3582354],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3581605],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[3368976],"length":1,"stats":{"Line":0},"fn_name":null},{"line":101,"address":[3369252,3368958,3369112],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[3369411],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[3369278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[3369485,3369604],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[3369652],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[3369797,3369692],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[3369999,3369841],"length":1,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[3369907],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[3371654],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[3371789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[3369639],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[3369717,3370051],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[3370099],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[3370139,3370454],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[3370498,3370656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[3370564],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[3371418],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[3371553],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[3370086],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[3370159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[3370708],"length":1,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[3370826],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[2744419],"length":1,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[3372346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[3372491,3372400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":156,"address":[3370836],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[3373456],"length":1,"stats":{"Line":0},"fn_name":"filter<hyper::body::body::Body>"},{"line":169,"address":[3374370,3374098],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[2746463],"length":1,"stats":{"Line":0},"fn_name":null},{"line":174,"address":[3374693,3374521],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[3374762],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[3375425,3374856],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[2746489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":184,"address":[3374893,3374816],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":187,"address":[2746515],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[3375044],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[2746541],"length":1,"stats":{"Line":0},"fn_name":null},{"line":192,"address":[3377295,3377571],"length":1,"stats":{"Line":0},"fn_name":null},{"line":193,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[3377457],"length":1,"stats":{"Line":0},"fn_name":null},{"line":198,"address":[3377713,3377745,3377612,3379059],"length":1,"stats":{"Line":0},"fn_name":null},{"line":200,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[3378985,3377919],"length":1,"stats":{"Line":0},"fn_name":null},{"line":204,"address":[3377888],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[3377944,3378208],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[3378257,3378812],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[3378222,3379785,3378286],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[2746567],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[3378487,3378292],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[2746593],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[3380131,3380218],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[2746619],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[3379862],"length":1,"stats":{"Line":0},"fn_name":null},{"line":227,"address":[3381104,3380937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[3380915],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":81},{"path":["/","home","runner","work","Busser","Busser","src","server","http.rs"],"content":"use crate::\n{\n    config::read_config, web::throttle::{handle_throttle, IpThrottler}\n};\n\nuse std::net::{IpAddr, Ipv4Addr, SocketAddr};\nuse std::sync::Arc;\nuse tokio::sync::Mutex;\n\nuse axum::\n{\n    routing::get, \n    Router, \n    response::Redirect,\n    middleware\n};\n\n/// An http redirect server \n/// # Example\n/// ```no_run\n/// use busser::server::http::ServerHttp;\n/// use tokio::task::spawn;\n/// #[tokio::main]\n/// async fn main() \n/// {\n///     let http_server = ServerHttp::new(0,0,0,0);\n///     let _http_redirect = spawn(http_server.serve());\n/// }\n/// ```\npub struct ServerHttp\n{\n    addr: SocketAddr,\n    router: Router\n}\n\nimpl ServerHttp\n{\n    pub fn new \n    (\n        a: u8,\n        b: u8,\n        c: u8,\n        d: u8\n    ) \n    -> ServerHttp\n    {\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let requests: IpThrottler = IpThrottler::new\n        (\n            config.throttle.max_requests_per_second, \n            config.throttle.timeout_millis,\n            config.throttle.clear_period_seconds\n        );\n\n        let throttle_state = Arc::new(Mutex::new(requests));\n\n        let mut domain = config.domain;\n\n        domain = domain.replacen(\"http://\", \"https://\", 1);\n\n        if !domain.starts_with(\"https://\")\n        {\n            domain = \"https://\".to_string()+&domain\n        }\n        \n        ServerHttp\n        {\n            addr: SocketAddr::new(IpAddr::V4(Ipv4Addr::new(a,b,c,d)), config.port_http),\n            router: Router::new()\n            .route(\"/\", get(|| async move \n            {\n                    crate::debug(format!(\"http redirect to {}\", domain), None);\n                    Redirect::permanent(&domain)\n            }))\n            .layer(middleware::from_fn_with_state(throttle_state.clone(), handle_throttle))\n\n        }\n    }\n\n    pub fn get_addr(self: ServerHttp) -> SocketAddr\n    {\n        self.addr\n    }\n\n    pub async fn serve(self: ServerHttp)\n    {\n        axum::Server::bind(&self.addr)\n        .serve(self.router.into_make_service_with_connect_info::<SocketAddr>())\n        .await\n        .unwrap();\n    }\n\n}","traces":[{"line":38,"address":[2833088,2834273,2835088],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[2833169],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[2833305],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[4159857],"length":1,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[4159949],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[2833349],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[2833365],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[2833428],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[2833491],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[2833547,2833615],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[2833818,2834246],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[2833965,2833882,2834251],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[2833938,2834286],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[2834487,2834644,2834368],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[2835296],"length":1,"stats":{"Line":0},"fn_name":null},{"line":91,"address":[2835321],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[2835392],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3610301,3610433,3610181,3610075,3610696],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[3610146,3610189,3610340,3610510],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[3261146],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":20},{"path":["/","home","runner","work","Busser","Busser","src","server","https.rs"],"content":"use crate::\n{\n    config::{read_config, Config}, pages::{get_pages, page::Page}, resources::get_resources, util::matches_one, web::{stats::{log_stats, Digest, Stats}, \n    throttle::{handle_throttle, IpThrottler}}\n};\n\nuse std::{collections::HashMap, net::{IpAddr, Ipv4Addr, SocketAddr}};\nuse std::path::PathBuf;\nuse std::sync::Arc;\nuse regex::Regex;\nuse tokio::{spawn, sync::Mutex};\n\nuse axum::\n{\n    middleware, response::IntoResponse, routing::get, \n    Router\n};\nuse axum_server::tls_rustls::RustlsConfig;\n\nuse super::api::{stats::StatsDigest, ApiRequest};\n\n/// An https server that reads a directory configured with [Config]\n/// ```.html``` pages and resources, then serves them.\n/// # Example\n/// ```no_run\n/// use busser::server::https::Server;\n/// #[tokio::main]\n/// async fn main() \n/// {\n///     let server = Server::new(0,0,0,0,true);\n///     server.serve().await;\n/// }\n/// ```\npub struct Server\n{\n    addr: SocketAddr,\n    router: Router,\n    config: Config\n}\n\n/// Checks a uri has a leading /, adds it if not\npub fn parse_uri(uri: String, path: String) -> String\n{\n    if uri.starts_with(&path)\n    {\n        uri.replace(&path, \"/\")\n    }\n    else if uri.starts_with(\"/\")\n    {\n        uri\n    }\n    else\n    {\n        \"/\".to_string()+&uri\n    }\n}\n\nimpl Server \n{\n    pub fn new \n    (\n        a: u8,\n        b: u8,\n        c: u8,\n        d: u8,\n        tag: bool\n    ) \n    -> Server\n    {\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let requests: IpThrottler = IpThrottler::new\n        (\n            config.throttle.max_requests_per_second, \n            config.throttle.timeout_millis,\n            config.throttle.clear_period_seconds\n        );\n\n        let throttle_state = Arc::new(Mutex::new(requests));\n\n        let pages = get_pages(Some(&config.content.path), Some(config.content.cache_period_seconds));\n        let resources = get_resources(Some(&config.content.path), Some(config.content.cache_period_seconds));\n\n        let mut router: Router<(), axum::body::Body> = Router::new();\n        \n        let ignore_patterns = match config.content.ignore_regexes.clone()\n        {\n            Some(p) => p,\n            None => vec![]\n        };\n\n        for mut page in pages\n        {\n\n            if matches_one(&page.get_uri(), &ignore_patterns)\n            {\n                continue\n            }           \n\n            crate::debug(format!(\"Adding page {:?}\", page.preview(64)), None);\n\n            let path = config.content.path.clone()+\"/\";\n\n            let uri = parse_uri(page.get_uri(), path);\n\n            crate::debug(format!(\"Serving: {}\", uri), None);\n\n            if tag { page.insert_tag(); }\n\n            if config.content.allow_without_extension\n            {\n                let extension_regex = Regex::new(r\"\\.\\S+$\").unwrap();\n                let short_uri = extension_regex.replacen(&uri, 1, \"\");\n\n                crate::debug(format!(\"Serving as short url: {}\",short_uri), None);\n\n                let page_short = page.clone();\n\n                router = router.route\n                (\n                    &short_uri, \n                    get(|| async move {page_short.clone().into_response()})\n                );\n            }\n\n            router = router.route\n            (\n                &uri, \n                get(|| async move {page.into_response()})\n            );\n        }\n\n        for resource in resources\n        {\n\n            if matches_one(&resource.get_uri(), &ignore_patterns)\n            {\n                continue\n            }  \n\n            crate::debug(format!(\"Adding resource {:?}\", resource.preview(8)), None);\n\n            let path = config.content.path.clone()+\"/\";\n\n            let uri = parse_uri(resource.get_uri(), path);\n\n            crate::debug(format!(\"Serving: {}\", uri), None);\n            \n            router = router.route\n            (\n                &uri, \n                get(|| async move {resource.clone().into_response()})\n            )\n        }\n\n        match Page::from_file(config.content.home.clone(), config.content.cache_period_seconds)\n        {\n            Some(mut page) => \n            { \n                if tag { page.insert_tag(); }\n                crate::debug(format!(\"Serving home page, /, {}\", page.preview(64)), None);\n                router = router.route(\"/\", get(|| async move {page.clone().into_response()}))\n            },\n            None => {}\n        }\n\n        let stats = Arc::new(Mutex::new(\n            Stats \n            {\n                hits: HashMap::new(), \n                last_save: chrono::offset::Utc::now(),\n                last_digest: chrono::offset::Utc::now(),\n                last_clear: chrono::offset::Utc::now(),\n                summary: Digest::new()\n            }\n        ));\n\n        let _stats_thread = spawn(Stats::stats_thread(stats.clone()));\n\n        router = router.layer(middleware::from_fn_with_state(stats.clone(), log_stats));\n        router = router.layer(middleware::from_fn_with_state(throttle_state.clone(), handle_throttle));\n\n        router = router.layer(middleware::from_fn_with_state(Some(stats), StatsDigest::filter));\n\n        Server\n        {\n            addr: SocketAddr::new(IpAddr::V4(Ipv4Addr::new(a,b,c,d)), config.port_https),\n            router,\n            config\n        }\n    }\n\n    pub fn get_addr(self: Server) -> SocketAddr\n    {\n        self.addr\n    }\n\n    pub async fn serve(self: Server)\n    {\n\n        // configure https\n\n        let cert_path = self.config.cert_path;\n        let key_path = self.config.key_path;\n\n        let config = match RustlsConfig::from_pem_file(\n            PathBuf::from(cert_path.clone()),\n            PathBuf::from(key_path.clone())\n        )\n        .await\n        {\n            Ok(c) => c,\n            Err(e) => \n            {\n                println!(\"error while reading certificates in {} and key {}\\n{}\", cert_path, key_path, e);\n                std::process::exit(1);\n            }\n        };\n\n        axum_server::bind_rustls(self.addr, config)\n        .serve(self.router.into_make_service_with_connect_info::<SocketAddr>())\n        .await\n        .unwrap();\n    }\n\n}","traces":[{"line":42,"address":[2911463,2910880,2911342],"length":1,"stats":{"Line":0},"fn_name":"parse_uri"},{"line":44,"address":[2910915,2911012],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[2911371,2911064],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[2911042,2911094,2911195],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[2911165],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[2911323,2911131,2911202],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[2916258,2920644,2911504],"length":1,"stats":{"Line":0},"fn_name":null},{"line":71,"address":[2911702],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[2911951],"length":1,"stats":{"Line":0},"fn_name":null},{"line":76,"address":[2911885],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[2911995],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[2912004],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[2912020],"length":1,"stats":{"Line":0},"fn_name":null},{"line":87,"address":[2912084],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[2912153,2912240],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[2912338,2912426],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[2912532],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[2912649,2912580],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[2912703],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[2912684,2912801],"length":1,"stats":{"Line":0},"fn_name":null},{"line":100,"address":[2912803,2920451,2912910],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[2917954,2913175],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[2918219,2918131],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[2918493],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[2918579,2918627],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[2918853],"length":1,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[2918979,2919005],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[2918985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":120,"address":[2919088],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[2919451,2919380],"length":1,"stats":{"Line":0},"fn_name":null},{"line":123,"address":[2919626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[2919761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[2920017,2920071,2919776],"length":1,"stats":{"Line":0},"fn_name":null},{"line":129,"address":[2919822],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[2919912],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[2919014,2920324,2920378],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[2919068],"length":1,"stats":{"Line":0},"fn_name":null},{"line":137,"address":[3183005,3182976,3182945,3182928],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":141,"address":[2917814,2913185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[2913529,2916406],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[2916671,2916583],"length":1,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[2916945],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[2917031,2917079],"length":1,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[2917291],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[2917410,2917687,2917741],"length":1,"stats":{"Line":0},"fn_name":null},{"line":159,"address":[2917464],"length":1,"stats":{"Line":0},"fn_name":null},{"line":160,"address":[3183264,3183341,3183312,3183281],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":164,"address":[2913539],"length":1,"stats":{"Line":0},"fn_name":null},{"line":166,"address":[2913649],"length":1,"stats":{"Line":0},"fn_name":null},{"line":168,"address":[2913690,2913730,2913778],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[2913861,2913715],"length":1,"stats":{"Line":0},"fn_name":null},{"line":170,"address":[3183665,3183696,3183726,3183648],"length":1,"stats":{"Line":0},"fn_name":"{closure#3}"},{"line":175,"address":[2914808],"length":1,"stats":{"Line":0},"fn_name":null},{"line":176,"address":[2914542],"length":1,"stats":{"Line":0},"fn_name":null},{"line":178,"address":[2913639],"length":1,"stats":{"Line":0},"fn_name":null},{"line":179,"address":[2914430],"length":1,"stats":{"Line":0},"fn_name":null},{"line":180,"address":[2914489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":181,"address":[2914508],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[2914535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":186,"address":[2914965,2914893],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[2916293,2915018],"length":1,"stats":{"Line":0},"fn_name":null},{"line":189,"address":[2915284,2916275],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[2916248,2915530],"length":1,"stats":{"Line":0},"fn_name":null},{"line":195,"address":[2915836,2915758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":201,"address":[2920672],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[2920697],"length":1,"stats":{"Line":0},"fn_name":null},{"line":206,"address":[2920768],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[3096764],"length":1,"stats":{"Line":0},"fn_name":null},{"line":212,"address":[3096800],"length":1,"stats":{"Line":0},"fn_name":null},{"line":214,"address":[3097095,3097643,3097231,3097546],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[3096836,3096985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":216,"address":[3097000,3097088],"length":1,"stats":{"Line":0},"fn_name":null},{"line":218,"address":[3097158,3096653,3097264,3096900,3097402,3097578],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[3097658],"length":1,"stats":{"Line":0},"fn_name":null},{"line":221,"address":[3097788],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[3098357,3098560,3097804],"length":1,"stats":{"Line":0},"fn_name":null},{"line":224,"address":[3098668],"length":1,"stats":{"Line":0},"fn_name":null},{"line":228,"address":[3097927,3098053,3097697,3098800,3098191],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[3097892,3098092,3098280,3097935],"length":1,"stats":{"Line":0},"fn_name":null},{"line":230,"address":[3098686,3098224,3098820,3096921,3098116],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":80},{"path":["/","home","runner","work","Busser","Busser","src","server","mod.rs"],"content":"pub mod https;\npub mod http;\npub mod api;","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","src","util.rs"],"content":"use core::fmt;\nuse std::{fmt::Write, io::{Read, Write as ioWrite}};\nuse libflate::deflate::{Encoder, Decoder};\nuse regex::Regex;\n\npub fn dump_bytes(v: &[u8]) -> String \n{\n    let mut byte_string = String::new();\n    for &byte in v\n    {\n        write!(&mut byte_string, \"{:0>2X}\", byte).expect(\"byte dump error\");\n    };\n    byte_string\n}\n\npub fn read_bytes(v: String) -> Vec<u8>\n{\n    (0..v.len()).step_by(2)\n    .map\n    (\n        |index| u8::from_str_radix(&v[index..index+2], 16).unwrap()\n    )\n    .collect()\n}\n\npub fn strip_control_characters(s: String) -> String\n{\n    let re = Regex::new(r\"[\\u0000-\\u001F]\").unwrap().replace_all(&s, \"\");\n    return re.to_string()\n}\n\npub fn matches_one(uri: &str, patterns: &Vec<String>) -> bool\n{\n    let mut ignore = false;  \n    for re_string in patterns.into_iter()\n    {\n        let re = match Regex::new(re_string.as_str())\n        {\n            Ok(r) => r,\n            Err(e) => \n            {crate::debug(format!(\"Could not parse content ingnore regex\\n{e}\\n Got {re_string}\"), None); continue;}\n        };\n\n        if re.is_match(uri)\n        {\n            crate::debug(format!(\"Ignoring {} due to pattern {re_string}\", uri), None);\n            ignore = true;\n            break;\n        }\n    }\n    ignore\n}\n\n#[derive(Debug, Clone)]\npub struct CompressionError\n{\n    pub why: String\n}\n\nimpl fmt::Display for CompressionError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"{}\", self.why)\n    }\n}\n\npub fn compress(bytes: &[u8]) -> Result<Vec<u8>, CompressionError>\n{\n    let mut encoder = Encoder::new(Vec::new());\n    \n    match encoder.write_all(&bytes)\n    {\n        Ok(_) => (),\n        Err(e) => \n        {\n            return Err(CompressionError { why: format!(\"Error writing to compressor: {}\", e) })\n        }\n    };\n\n    match encoder.finish().into_result()\n    {\n        Ok(data) => Ok(data), \n        Err(e) => \n        {\n            Err(CompressionError { why: format!(\"Error finalising compressor: {}\", e) })\n        }\n    }\n}\n\npub fn decompress(bytes: Vec<u8>) -> Result<String, CompressionError>\n{\n    let mut decoder = Decoder::new(&bytes[..]);\n    let mut decoded_data = Vec::new();\n\n    match decoder.read_to_end(&mut decoded_data)\n    {\n        Ok(_) => (),\n        Err(e) => \n        {\n            return Err(CompressionError { why: format!(\"Error decoding data: {}\", e) })\n        }\n    }\n    \n    match std::str::from_utf8(&decoded_data)\n    {\n        Ok(s) => Ok(s.to_string()),\n        Err(e) => \n        {\n            Err(CompressionError { why: format!(\"Decoded data is not utf8: {}\", e) })\n        }\n    }\n}\n","traces":[{"line":6,"address":[3187424,3188183],"length":1,"stats":{"Line":0},"fn_name":"dump_bytes"},{"line":8,"address":[3187472],"length":1,"stats":{"Line":0},"fn_name":null},{"line":9,"address":[3187679,3187487,3187559],"length":1,"stats":{"Line":0},"fn_name":null},{"line":11,"address":[3187779,3188027],"length":1,"stats":{"Line":0},"fn_name":null},{"line":13,"address":[3187645],"length":1,"stats":{"Line":0},"fn_name":null},{"line":16,"address":[3188208,3188428],"length":1,"stats":{"Line":0},"fn_name":"read_bytes"},{"line":18,"address":[3188354,3188238,3188296],"length":1,"stats":{"Line":0},"fn_name":null},{"line":21,"address":[3290419,3290620,3290400],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":26,"address":[3189022,3188464],"length":1,"stats":{"Line":0},"fn_name":"strip_control_characters"},{"line":28,"address":[3188809,3188486],"length":1,"stats":{"Line":0},"fn_name":null},{"line":29,"address":[3188975],"length":1,"stats":{"Line":0},"fn_name":null},{"line":32,"address":[3189056,3189916],"length":1,"stats":{"Line":0},"fn_name":"matches_one"},{"line":34,"address":[3189097],"length":1,"stats":{"Line":0},"fn_name":null},{"line":35,"address":[3189105,3189210],"length":1,"stats":{"Line":0},"fn_name":null},{"line":37,"address":[3189226],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3189285],"length":1,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[3189384],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3189938,3190092],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[3189542,3189349],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3189750],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[3189889],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[6102740],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[3189190],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[6102670],"length":1,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[3190256],"length":1,"stats":{"Line":0},"fn_name":"fmt"},{"line":62,"address":[3190311],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[3191366,3190384],"length":1,"stats":{"Line":0},"fn_name":"compress"},{"line":68,"address":[3190411],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[3190478,3190550],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[6103756],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[3190748],"length":1,"stats":{"Line":0},"fn_name":null},{"line":75,"address":[3191442],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[3190591,3190842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":81,"address":[3190909],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[3191002],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3191160],"length":1,"stats":{"Line":0},"fn_name":null},{"line":89,"address":[3192798,3191664],"length":1,"stats":{"Line":0},"fn_name":"decompress"},{"line":91,"address":[3191694,3191773],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[3191789],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[3191846,3191919],"length":1,"stats":{"Line":0},"fn_name":null},{"line":97,"address":[3191959],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[3192582],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[3191930,3192063],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[3192093,3192235],"length":1,"stats":{"Line":0},"fn_name":null},{"line":106,"address":[3192140],"length":1,"stats":{"Line":0},"fn_name":null},{"line":108,"address":[3192309],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":46},{"path":["/","home","runner","work","Busser","Busser","src","web","discord","mod.rs"],"content":"pub mod request;","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","src","web","discord","request","mod.rs"],"content":"pub mod model;\npub mod post;","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","src","web","discord","request","model.rs"],"content":"use serde::{Serialize, Deserialize};\n\n#[derive(Clone, Serialize, Deserialize)]\npub struct Webhook \n{\n    addr: String\n}\n\nimpl Webhook\n{\n\n    pub fn new(url: String) -> Webhook\n    {\n        Webhook { addr: url }\n    }\n\n    pub fn get_addr(self: Webhook) -> String \n    {\n        self.addr\n    }\n}","traces":[{"line":12,"address":[3592240],"length":1,"stats":{"Line":0},"fn_name":null},{"line":17,"address":[3592272],"length":1,"stats":{"Line":0},"fn_name":null},{"line":19,"address":[3592275],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":3},{"path":["/","home","runner","work","Busser","Busser","src","web","discord","request","post.rs"],"content":"//! Post messages to a discord webhook\n\nuse std::collections::HashMap;\n\nuse crate::web::discord::request::model::Webhook;\n\n/// Send a simple plaintext string message, msg, to the webhook w\n/// \n/// Should not be used to post JSON payloads, msg will be sent to \n/// the webhook wrapped in the content section. It will appear as \n/// plaintext on the server\n/// \n/// For example\n/// \n/// # Example\n/// ```rust\n/// \n/// use busser::web::discord::request::{model::Webhook, post::post};\n/// \n/// pub async fn post_to_discord(){\n///     let w = Webhook::new(\"https://discord.com/api/webhooks/xxx/yyy\".to_string());\n///     post(w, \"this is some plaintext\".to_string());\n/// }\n/// ```\n/// \n/// is equivalent to the following POST request\n/// \n/// ```not_rust\n///  POST /api/webhooks/xxx/yyy HTTP/1.1\n///  Host: discord.com\n///  Accept: application/json\n///  Content-Type:application/json\n///  Content-Length: xx\n///  {\"content\": \"this is some plaintext\"}\n/// ``` \n\npub async fn post(w: Webhook, msg: String) -> Result<String, reqwest::Error>\n{\n\n    crate::debug(format!(\"Posting to Discord {:?}\", msg), None);\n    let client = reqwest::Client::new();\n\n    let mut map = HashMap::new();\n    map.insert(\"content\", &msg);\n    \n    match client.post(&w.get_addr())\n        .json(&map)\n        .send()\n        .await\n    {\n        Ok(r) => Ok(format!(\"OK\\nGot response:\\n\\n{:#?}\", r)),\n        Err(e) => Err(e)\n    }\n\n}","traces":[{"line":37,"address":[3301944],"length":1,"stats":{"Line":0},"fn_name":null},{"line":40,"address":[2519329,2519500],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3295511],"length":1,"stats":{"Line":0},"fn_name":null},{"line":43,"address":[2519662],"length":1,"stats":{"Line":0},"fn_name":null},{"line":44,"address":[3302419],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3295988,3296402,3295700,3295916,3295834,3296515,3296042],"length":1,"stats":{"Line":0},"fn_name":null},{"line":47,"address":[3302707],"length":1,"stats":{"Line":0},"fn_name":null},{"line":49,"address":[2830330],"length":1,"stats":{"Line":0},"fn_name":null},{"line":51,"address":[3296574,3296695,3296985],"length":1,"stats":{"Line":0},"fn_name":null},{"line":52,"address":[3296648],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":10},{"path":["/","home","runner","work","Busser","Busser","src","web","mod.rs"],"content":"use axum::\n{\n    body::Bytes, http::{HeaderMap, StatusCode}\n};\n\nuse openssl::{pkey::PKey, sign::Signer, hash::MessageDigest, memcmp};\nuse regex::Regex;\n\nuse crate::util::{read_bytes, dump_bytes};\n\npub mod throttle;\npub mod response;\npub mod discord;\npub mod stats;\n\n/// Uses openssl to verify the request body via the given hmac_token\n///   - hmac_header_key is the location in the https header for the digest\npub fn is_authentic\n(\n    headers: HeaderMap,\n    hmac_header_key: &str,\n    hmac_token: String, \n    body: Bytes\n) -> StatusCode\n{\n    match headers.contains_key(hmac_header_key)\n    {\n        false => \n        {\n            crate::debug(\"no signature\".to_string(), None);\n            return StatusCode::UNAUTHORIZED\n        },\n        true => {}\n    };\n\n    let sender_hmac = match std::str::from_utf8(headers[hmac_header_key].as_bytes())\n    {\n        Ok(s) => s,\n        Err(_) => \n        {\n            crate::debug(\"signature utf8 parse failure\".to_string(), None);\n            return StatusCode::BAD_REQUEST\n        }\n    };\n\n    let post_digest = Regex::new(r\"sha256=\").unwrap().replace_all(&sender_hmac, \"\").into_owned().to_uppercase();\n\n    let key = match PKey::hmac(hmac_token.as_bytes())\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"key creation failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n\n    let mut signer = match Signer::new(MessageDigest::sha256(), &key)\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"signer creation failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n    \n    match signer.update(&body)\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"signing update failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n\n    let hmac = match signer.sign_to_vec()\n    {\n        Ok(k) => k,\n        Err(_) => \n        {\n            crate::debug(\"sign failure\".to_string(), None);\n            return StatusCode::INTERNAL_SERVER_ERROR\n        }\n    };\n\n    crate::debug(format!(\"post_digtest: {}, len: {}\\nlocal hmac: {}, len: {}\", post_digest, post_digest.len(), dump_bytes(&hmac), dump_bytes(&hmac).len()), None);\n\n    match memcmp::eq(&hmac, &read_bytes(post_digest.clone()))\n    {\n        true => {},\n        false => \n        {\n            crate::debug(format!(\"bad signature: local/post\\n{}\\n{}\", post_digest, dump_bytes(&hmac)), None);\n            return StatusCode::UNAUTHORIZED\n        }\n    }\n\n    // it is now safe to process the POST request\n\n    StatusCode::ACCEPTED\n}","traces":[{"line":18,"address":[3633504,3638591,3637519],"length":1,"stats":{"Line":0},"fn_name":"is_authentic"},{"line":26,"address":[3633567,3633668],"length":1,"stats":{"Line":0},"fn_name":null},{"line":30,"address":[3633674,3633761],"length":1,"stats":{"Line":0},"fn_name":null},{"line":31,"address":[3633796],"length":1,"stats":{"Line":0},"fn_name":null},{"line":36,"address":[3633836,3633725],"length":1,"stats":{"Line":0},"fn_name":null},{"line":38,"address":[3633905],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3633984,3638503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":42,"address":[3638538],"length":1,"stats":{"Line":0},"fn_name":null},{"line":46,"address":[3634273,3633953],"length":1,"stats":{"Line":0},"fn_name":null},{"line":48,"address":[3635373],"length":1,"stats":{"Line":0},"fn_name":null},{"line":50,"address":[3635466],"length":1,"stats":{"Line":0},"fn_name":null},{"line":53,"address":[3638365,3634791],"length":1,"stats":{"Line":0},"fn_name":null},{"line":54,"address":[3638400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[3634903,3634821],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[3635000],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[3638139,3635085],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[3638174],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3635225,3635123],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[3633551],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[3636042,3638710],"length":1,"stats":{"Line":0},"fn_name":null},{"line":74,"address":[3638745],"length":1,"stats":{"Line":0},"fn_name":null},{"line":78,"address":[3636072],"length":1,"stats":{"Line":0},"fn_name":null},{"line":80,"address":[3636110],"length":1,"stats":{"Line":0},"fn_name":null},{"line":83,"address":[3636219,3638552],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3638587],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[3636433,3636726,3636575,3637092],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[3637614,3637418],"length":1,"stats":{"Line":0},"fn_name":null},{"line":95,"address":[3637888,3637756],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[3638185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[3638264],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":30},{"path":["/","home","runner","work","Busser","Busser","src","web","response","mod.rs"],"content":"pub mod util;","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","src","web","response","util.rs"],"content":"//! Utility responses for the axum server\n\nuse axum::http::{StatusCode, HeaderMap};\nuse axum::response::IntoResponse;\n\nuse axum::\n{\n    http::Request,\n    middleware::Next,\n    response::Response,\n    body::Bytes,\n};\n\nuse chrono::Local;\n\n/// Response that returns the body of the request, a reflection\n/// \n/// # Example\n/// \n/// ```rust\n/// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n/// use std::sync::{Arc, Mutex};\n///\n/// use axum::\n/// {\n///     routing::post, \n///     Router, \n///     middleware\n/// };\n/// \n/// use busser::web::response::util::reflect;\n/// \n/// pub async fn server() {\n/// let app = Router::new()\n/// .route(\"/\", post(|| async move {  }))\n/// .layer(middleware::from_fn(reflect));\n/// \n/// let ip = Ipv4Addr::new(127,0,0,1);\n/// let addr = SocketAddr::new(IpAddr::V4(ip), 3030);\n/// \n/// axum::Server::bind(&addr)\n/// .serve(app.into_make_service_with_connect_info::<SocketAddr>())\n/// .await\n/// .unwrap();\n/// }\n/// ````\n\npub async fn reflect<B>\n(\n    headers: HeaderMap,\n    request: Request<B>,\n    _next: Next<B>\n) -> Result<Response, StatusCode>\nwhere B: axum::body::HttpBody<Data = Bytes>\n{\n    let (_parts, body) = request.into_parts();\n\n    let bytes = match body.collect().await {\n        Ok(collected) => collected.to_bytes(),\n        Err(_) => {\n            return Err(StatusCode::BAD_REQUEST)\n        }\n    };\n\n    let body = std::str::from_utf8(&bytes).unwrap().to_string();\n\n    println!(\"[{}] Got request:\\n\\nheader:\\n\\n{:?}\\n\\nbody:\\n\\n{}\", Local::now(), headers, body);\n    \n    Ok(format!(\"You sent:\\n{}\",body).into_response())\n    \n}\n\n/// Response that logs the header and body of the request to stdout\n/// \n/// # Example\n/// \n/// ```rust\n/// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n/// use std::sync::{Arc, Mutex};\n///\n/// use axum::\n/// {\n///     routing::post, \n///     Router, \n///     middleware\n/// };\n/// \n/// use busser::web::response::util::stdout_log;\n/// \n/// \n/// pub async fn server() {\n/// let app = Router::new()\n/// .route(\"/\", post(|| async move {  }))\n/// .layer(middleware::from_fn(stdout_log));\n/// \n/// let ip = Ipv4Addr::new(127,0,0,1);\n/// let addr = SocketAddr::new(IpAddr::V4(ip), 3000);\n/// \n/// axum::Server::bind(&addr)\n/// .serve(app.into_make_service_with_connect_info::<SocketAddr>())\n/// .await\n/// .unwrap();\n/// }\n/// ````\npub async fn stdout_log<B>\n(\n    headers: HeaderMap,\n    request: Request<B>,\n    _next: Next<B>\n) -> Result<Response, StatusCode>\nwhere B: axum::body::HttpBody<Data = Bytes>\n{\n    let (_parts, body) = request.into_parts();\n\n    let bytes = match body.collect().await {\n        Ok(collected) => collected.to_bytes(),\n        Err(_) => {\n            return Err(StatusCode::BAD_REQUEST)\n        }\n    };\n\n    let body = std::str::from_utf8(&bytes).unwrap().to_string();\n\n    println!(\"[{}] Got request:\\n\\nheader:\\n\\n{:?}\\n\\nbody:\\n\\n{}\", Local::now(), headers, body);\n    \n    Ok((StatusCode::OK).into_response())\n    \n}","traces":[{"line":56,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":58,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":59,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":61,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":67,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":69,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":113,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":116,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":117,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":122,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":124,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[],"length":0,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":16},{"path":["/","home","runner","work","Busser","Busser","src","web","stats.rs"],"content":"use std::cmp::{max, min};\nuse std::collections::HashMap;\nuse std::fs::create_dir;\nuse std::net::{IpAddr, Ipv4Addr, SocketAddr};\nuse std::sync::Arc;\nuse std::time::Instant;\nuse chrono::{DateTime, Datelike, TimeZone, Timelike};\nuse openssl::sha::sha512;\nuse tokio::sync::{Mutex, MutexGuard};\n\nuse serde::{Deserialize, Serialize};\n\nuse axum::\n{\n    http::{Request, StatusCode}, \n    response::Response, \n    extract::{State, ConnectInfo},\n    middleware::Next\n};\n\nuse crate::config::read_config;\nuse crate::pages::page::is_page;\nuse crate::\n{\n    filesystem::file::{read_file_utf8, write_file},\n    util::\n    {\n        compress, \n        dump_bytes,  \n        matches_one\n    },\n    filesystem::folder::list_dir_by\n};\n\nuse crate::web::discord::request::post::post;\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct Hit\n{\n    count: u16,\n    times: Vec<String>,\n    path: String,\n    ip_hash: String\n}\n\n#[derive(Debug, Clone)]\npub struct Digest\n{\n    pub top_hitters: Vec<(String, u16)>,\n    pub top_pages: Vec<(String, u16)>,\n    pub top_resources: Vec<(String, u16)>,\n    pub hits_by_hour_utc: [u16; 24],\n    pub total_hits: u16,\n    pub unique_hits: u16\n}\n\nimpl Digest\n{\n    pub fn new() -> Digest\n    {\n        Digest\n        {\n            top_hitters: vec![],\n            top_pages: vec![],\n            top_resources: vec![],\n            hits_by_hour_utc: [0;24],\n            total_hits: 0,\n            unique_hits: 0\n        }\n    }\n}\n\n#[derive(Debug, Clone)]\npub struct Stats\n{\n    pub hits: HashMap<[u8; 64], Hit>,\n    pub last_save: DateTime<chrono::Utc>,\n    pub last_digest: DateTime<chrono::Utc>,\n    pub last_clear: DateTime<chrono::Utc>,\n    pub summary: Digest\n}\n\nimpl Stats\n{\n    pub async fn process_hit\n    (\n        addr: SocketAddr,\n        state: Arc<Mutex<Stats>>,\n        uri: String \n    )\n    {\n        let start_time = Instant::now();\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let mut stats = state.lock().await;\n\n        let compute_start_time = Instant::now();\n\n        let stats_config = config.stats;\n\n        let ip = addr.ip();\n        let ipv4: Ipv4Addr;\n    \n        match ip \n        {\n            IpAddr::V4(ip4) => {ipv4 = ip4}\n            IpAddr::V6(_ip6) => {return}\n        }\n        \n        let ip_hash = sha512(&ipv4.octets());\n        let hash = sha512(&[uri.as_bytes(), &ipv4.octets()].concat());\n\n        let hit = match stats.hits.contains_key(&hash)\n        {\n            true =>\n            {\n                let mut hit = stats.hits[&hash].clone();\n                let last_hit = stats.hits[&hash].times.last();\n\n                match last_hit \n                {\n                    None => {hit},\n                    Some(s) => \n                    {\n                        let t = DateTime::parse_from_rfc3339(&s);\n                        match t \n                        {\n                            Ok(t) => \n                            {\n                                let delta = (chrono::offset::Utc::now()-t.to_utc()).num_seconds();\n                                if delta < (stats_config.hit_cooloff_seconds as i64)\n                                {\n                                    let total_time = start_time.elapsed().as_secs_f64();\n                                    let compute_time = compute_start_time.elapsed().as_secs_f64();\n\n                                    crate::debug(format!\n                                    (\n                                        \"\\nTotal stats time:         {} s (Passthrough)\\nCompute stats time:       {} s (Passthrough)\", \n                                        total_time,\n                                        compute_time\n                                    ), Some(\"PERFORMANCE\".to_string()));\n\n                                    return\n                                }\n                                hit.times.push(chrono::offset::Utc::now().to_rfc3339());\n                                hit.count += 1;\n                                hit\n                            },\n                            Err(_e) => {hit}\n                        }\n                    }            \n                }\n            },\n            false => \n            {\n\n                Hit {path: uri, count: 1, times: vec![chrono::offset::Utc::now().to_rfc3339()], ip_hash: dump_bytes(&ip_hash)}\n            }\n        };\n\n        crate::debug(format!(\"{:?}\", hit), Some(\"Statistics\".to_string()));\n\n        stats.hits.insert(hash, hit);\n\n        let compute_time = compute_start_time.elapsed().as_secs_f64();\n\n        let total_time = start_time.elapsed().as_secs_f64();\n\n        crate::debug(format!\n        (\n            \"\\nTotal stats time:         {} s\\nCompute stats time:       {} s\", \n            total_time,\n            compute_time\n        ), Some(\"PERFORMANCE\".to_string()));\n    }\n\n    pub fn process_hits(path: String, from: Option<DateTime<chrono::Utc>>, to: Option<DateTime<chrono::Utc>>, top_n: Option<usize>, stats: Option<Stats>) -> Digest\n    {\n\n        let n = match top_n\n        {\n            Some(n) => n,\n            None => 3\n        };\n\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let mut digest = Digest::new();\n\n        let stats_files = list_dir_by(None, path);\n\n        let mut hitters: HashMap<String, u16> = HashMap::new();\n        let mut pages: HashMap<String, u16> = HashMap::new();\n        let mut resources: HashMap<String, u16> = HashMap::new();\n\n        let mut hits: Vec<Hit> = vec![];\n\n        for file in stats_files\n        {\n            crate::debug(format!(\"Processing stats files: {}\", file), None);\n            \n            let time_string = match file.split(\"/\").last()\n            {\n                Some(s) => s,\n                None => {crate::debug(format!(\"Could not parse time from stats file name {}\",file), None); continue}\n            };\n\n            let t = match DateTime::parse_from_rfc3339(&time_string)\n            {\n                Ok(date) => date,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            if from.is_some_and(|from| t < from) { continue }\n            if to.is_some_and(|to| t > to) { continue }\n\n            let data = match read_file_utf8(&file)\n            {\n                Some(d) => d,\n                None => {continue}\n            };\n\n            let file_hits: Vec<Hit> = match serde_json::from_str(&data)\n            {\n                Ok(s) => s,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            for hit in file_hits\n            {\n                hits.push(hit);\n            }\n        }\n\n        if stats.is_some()\n        {\n            for (_hash, hit) in &stats.as_ref().unwrap().hits\n            {\n                // check the cached stats are within the time period, then add\n                let mut count = 0;\n                let mut times: Vec<String> = vec![];\n                for i in 0..hit.times.len()\n                {\n                    let t = match DateTime::parse_from_rfc3339(&hit.times[i])\n                    {\n                        Ok(date) => date,\n                        Err(e) => {crate::debug(format!(\"Error {}\",e), None); continue}\n                    };\n                    if !from.is_some_and(|from| t < from) && !to.is_some_and(|to| t > to) \n                    {\n                        count += 1;\n                        times.push(hit.times[i].clone());\n                    }\n                }\n                if count > 0\n                {\n                    let h = Hit {count, times, ip_hash: hit.ip_hash.clone(), path: hit.path.clone()};\n                    hits.push(h.clone());\n                }\n            }\n        }\n\n        let ignore_patterns = match config.content.ignore_regexes.clone()\n        {\n            Some(p) => p,\n            None => vec![]\n        };\n\n        for hit in hits\n        {\n            if matches_one(&hit.path, &ignore_patterns)\n            {\n                continue\n            }  \n\n            match hitters.contains_key(&hit.ip_hash)\n            {\n                true => {hitters.insert(hit.ip_hash.clone(), hit.count+hitters[&hit.ip_hash]);},\n                false => \n                {\n                    hitters.insert(hit.ip_hash, hit.count);\n                    digest.unique_hits += 1;\n                }\n            }\n\n            if is_page(&hit.path, &config.domain)\n            {\n                match pages.contains_key(&hit.path)\n                {\n                    true => {pages.insert(hit.path.clone(), hit.count+pages[&hit.path]);},\n                    false => {pages.insert(hit.path, hit.count);}\n                }\n            }\n            else\n            {\n                match resources.contains_key(&hit.path)\n                {\n                    true => {resources.insert(hit.path.clone(), hit.count+resources[&hit.path]);},\n                    false => {resources.insert(hit.path, hit.count);}\n                }\n            }\n\n            digest.total_hits += hit.count;\n\n            for time in hit.times\n            {\n                match DateTime::parse_from_rfc3339(&time)\n                {\n                    Ok(t) => \n                    {\n                        if (0..23).contains(&t.hour()) { digest.hits_by_hour_utc[t.hour() as usize]+= 1; }\n                    },\n                    Err(_e) => {}\n                }\n            }\n        }\n\n        let mut all_hitters: Vec<(String, u16)> = hitters.into_iter().collect();\n        let mut all_pages: Vec<(String, u16)> = pages.into_iter().collect();\n        let mut all_resources: Vec<(String, u16)> = resources.into_iter().collect();\n\n        all_hitters.sort_by(|a: &(String, u16), b: &(String, u16)| a.1.cmp(&b.1));\n        all_hitters.reverse();\n\n        digest.top_hitters = (0..n).map(|_i| (\"\".to_string(), 0)).collect();\n\n        for i in 0..n\n        {\n            if i < all_hitters.len()\n            {\n                digest.top_hitters[i] = all_hitters[i].clone();\n            }\n            else\n            {\n                digest.top_hitters[i] = (\"\".to_string(), 0);\n            }\n        }\n\n        all_pages.sort_by(|a: &(String, u16), b: &(String, u16)| a.1.cmp(&b.1));\n        all_pages.reverse();\n\n        all_resources.sort_by(|a: &(String, u16), b: &(String, u16)| a.1.cmp(&b.1));\n        all_resources.reverse();\n\n        digest.top_pages = (0..n).map(|_i| (\"\".to_string(), 0)).collect();\n        digest.top_resources = (0..n).map(|_i| (\"\".to_string(), 0)).collect();\n\n        for i in 0..n\n        {\n            if i < all_pages.len()\n            {\n                digest.top_pages[i] = all_pages[i].clone();\n            }\n            else\n            {\n                digest.top_pages[i] = (\"\".to_string(), 0);\n            }\n\n            if i < all_resources.len()\n            {\n                digest.top_resources[i] = all_resources[i].clone();\n            }\n            else\n            {\n                digest.top_resources[i] = (\"\".to_string(), 0);\n            }\n        }\n\n        digest\n\n    }\n\n    pub fn save(stats: &mut MutexGuard<'_, Stats>)\n    {\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let stats_config = config.stats;\n\n        let write_start_time = Instant::now();\n\n        if !std::path::Path::new(&stats_config.path).exists()\n        {\n            match create_dir(stats_config.path.to_string())\n            {\n                Ok(_s) => {},\n                Err(e) => {crate::debug(format!(\"Error creating stats dir {}\",e), None)}\n            }\n        }\n\n        let file_name = stats_config.path.to_string()+\"/\"+&chrono::offset::Utc::now().to_rfc3339();\n        let hits: Vec<Hit> = stats.hits.values().cloned().collect();\n        match serde_json::to_string(&hits)\n        {\n            Ok(s) => {write_file(&file_name, s.as_bytes())},\n            Err(e) => {crate::debug(format!(\"Error saving stats {}\", e), None)}\n        }\n\n        let write_time = write_start_time.elapsed().as_secs_f64();\n\n        stats.last_save = chrono::offset::Utc::now();\n        stats.hits.clear();\n\n        crate::debug(format!\n        (\n            \"Write stats time:       {} s\", \n            write_time\n        ), Some(\"PERFORMANCE\".to_string()));\n\n    }\n\n    pub fn archive()\n    {\n        let config = match read_config()\n        {\n            Some(c) => c,\n            None =>\n            {\n                std::process::exit(1)\n            }\n        };\n\n        let stats_files = list_dir_by(None, config.stats.path.clone());\n\n        for file in stats_files\n        {\n            let time_string = match file.split(\"/\").last()\n            {\n                Some(s) => s,\n                None => {crate::debug(format!(\"Could not parse time from stats file name {}\",file), None); continue}\n            };\n\n            let _t = match DateTime::parse_from_rfc3339(&time_string)\n            {\n                Ok(date) => date,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            let data = match read_file_utf8(&file)\n            {\n                Some(d) => d,\n                None => {continue}\n            };\n\n            let _file_hits: Vec<Hit> = match serde_json::from_str(&data)\n            {\n                Ok(s) => s,\n                Err(e) => {crate::debug(format!(\"Error {} loading stats file {}\",e,file), None); continue}\n            };\n\n            let zip = match compress(data.as_bytes())\n            {\n                Ok(z) => z,\n                Err(e) => {crate::debug(format!(\"{e}, compressing stats file {}\", file), None); continue}\n            };\n\n            let mut name = String::new();\n            name.push_str(config.stats.path.as_str());\n            name.push_str(&time_string);\n            name.push_str(\".zip\");\n            write_file(&name, &zip);\n\n            match std::fs::remove_file(file.clone())\n            {\n                Ok(_) => {},\n                Err(e) => {crate::debug(format!(\"{e}, while deleting stats file {}\", file), None);}\n            }\n        }\n    }\n\n    pub fn digest_message(digest: Digest, from: Option<DateTime<chrono::Utc>>, to: Option<DateTime<chrono::Utc>>) -> String\n    {\n        let mut msg = String::new(); \n\n        match from\n        {\n            Some(s) => \n            {\n                match to\n                {\n                    Some(t) =>\n                    {\n                        msg.push_str(format!(\"Hits from {} to {}\\n\", s, t).as_str());\n                    },\n                    None => \n                    {\n                        msg.push_str(format!(\"Hits since {}\\n\", s).as_str());\n                    }\n                }  \n            },\n            None => {msg.push_str(\"All hits\\n\");}\n        };\n        \n        msg.push_str(format!(\"Total / Unique: {} / {}\\n\", digest.total_hits, digest.unique_hits).as_str());\n\n        let mut top_resources = String::new();\n        let mut top_pages = String::new();\n        let n = min(digest.top_resources.len(), digest.top_pages.len());\n        for i in 0..n\n        {\n            if digest.top_resources[i].1 > 0\n            {\n                top_resources.push_str(format!(\"  {} : {}\\n\", digest.top_resources[i].0, digest.top_resources[i].1).as_str());\n            }\n\n            if digest.top_pages[i].1 > 0\n            {\n                top_pages.push_str(format!(\"  {} : {}\\n\", digest.top_pages[i].0, digest.top_pages[i].1).as_str());\n            }\n        }\n        msg.push_str(format!(\"Top {n} pages:\\n{}\\n\", top_pages).as_str());\n        msg.push_str(format!(\"Top {n} resources:\\n{}\\n\", top_resources).as_str());\n        msg.push_str(format!(\"Hits by hour (UTC):\\n\\n{}\", hits_by_hour_text_graph(digest.hits_by_hour_utc, '-', 10)).as_str());\n\n        msg\n    }\n\n    pub async fn stats_thread(state: Arc<Mutex<Stats>>)\n    {\n        loop\n        {\n\n            let t = chrono::offset::Utc::now();\n            \n            {\n                let mut stats = state.lock().await;\n\n                let config = match read_config()\n                {\n                    Some(c) => c,\n                    None =>\n                    {\n                        std::process::exit(1)\n                    }\n                };\n\n                let stats_config = config.stats;\n\n                if (t - stats.last_save).num_seconds() > stats_config.save_period_seconds as i64\n                {\n                    Stats::save(&mut stats);\n                }\n\n                if (t - stats.last_digest).num_seconds() > stats_config.digest_period_seconds as i64\n                {\n                    stats.summary = Self::process_hits(stats_config.path.clone(), Some(stats.last_digest), None, stats_config.top_n_digest, Some(stats.to_owned()));\n                    let msg = Stats::digest_message(stats.summary.clone(), Some(stats.last_digest), None);\n                    match post(config.notification_endpoint, msg).await\n                    {\n                        Ok(_s) => (),\n                        Err(e) => {crate::debug(format!(\"Error posting to discord\\n{}\", e), None);}\n                    }\n                    stats.last_digest = t;\n                }\n\n                if (t - stats.last_clear).num_seconds() > stats_config.log_files_clear_period_seconds as i64\n                {\n                    Self::archive();\n                    stats.last_clear = t;\n                }\n            }\n\n            let wait = min(3600, (chrono::Utc::with_ymd_and_hms\n            (\n                &chrono::Utc, \n                t.year(), \n                t.month(), \n                t.day(), \n                1, \n                0, \n                0\n            ).unwrap() + chrono::Duration::days(1) - t).num_seconds()) as u64;\n            crate::debug(format!(\"Sleeping for {}\", wait), Some(\"Statistics\".to_string()));\n            tokio::time::sleep(std::time::Duration::from_secs(wait)).await;\n        }\n    }\n}\n\npub async fn log_stats<B>\n(\n    ConnectInfo(addr): ConnectInfo<SocketAddr>,\n    State(state): State<Arc<Mutex<Stats>>>,\n    request: Request<B>,\n    next: Next<B>\n) -> Result<Response, StatusCode>\n{\n    \n    let uri = request.uri().to_string();\n    tokio::spawn\n    (async move\n        {\n            Stats::process_hit(addr, state, uri).await\n        }\n    );\n           \n    Ok(next.run(request).await)\n}\n\npub fn hits_by_hour_text_graph(hits: [u16; 24], symbol: char, size: u8) -> String\n{\n    let mut graph = String::new();\n\n    let mut top_hour = hits[0];\n    for i in 1..23\n    {\n        top_hour = max(top_hour, hits[i]);\n    }\n\n    for (i, h) in hits.iter().enumerate()\n    {\n        let s = ((size as f64) * (*h as f64) / (top_hour as f64)) as usize;\n\n        graph.push_str(format!(\"{:0>2}:00\", i).as_str());\n        graph.push_str(std::iter::repeat(symbol).take(s).collect::<String>().as_str());\n        graph.push_str(\"\\n\");\n    }\n\n    graph\n}","traces":[{"line":59,"address":[3104336,3104632],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[3104353],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[3104382],"length":1,"stats":{"Line":0},"fn_name":null},{"line":65,"address":[3104427],"length":1,"stats":{"Line":0},"fn_name":null},{"line":66,"address":[3104481],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[3104656],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[2970286,2970446],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[2970452,2970510,2970110],"length":1,"stats":{"Line":0},"fn_name":null},{"line":96,"address":[2970607],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[2970536],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[2767572],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[2971164,2971249],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[2971264],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[2971368],"length":1,"stats":{"Line":0},"fn_name":null},{"line":112,"address":[2971435],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[2971453],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[2971503],"length":1,"stats":{"Line":0},"fn_name":null},{"line":118,"address":[2971547,2971489],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[2971596],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[2972007,2971937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[2972128,2972843],"length":1,"stats":{"Line":0},"fn_name":null},{"line":126,"address":[2972983,2972904],"length":1,"stats":{"Line":0},"fn_name":null},{"line":128,"address":[2973107],"length":1,"stats":{"Line":0},"fn_name":null},{"line":130,"address":[2973136],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[2973175],"length":1,"stats":{"Line":0},"fn_name":null},{"line":133,"address":[2973191],"length":1,"stats":{"Line":0},"fn_name":null},{"line":134,"address":[2973257],"length":1,"stats":{"Line":0},"fn_name":null},{"line":136,"address":[2973282],"length":1,"stats":{"Line":0},"fn_name":null},{"line":138,"address":[2973370,2973298],"length":1,"stats":{"Line":0},"fn_name":null},{"line":139,"address":[2973512],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[2973766,2973541],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[2973823],"length":1,"stats":{"Line":0},"fn_name":null},{"line":144,"address":[2974412,2974176],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[2974517,2974010,2974447,2974312,2974504],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[2973522,2973582],"length":1,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[2973718,2973636],"length":1,"stats":{"Line":0},"fn_name":null},{"line":155,"address":[2973679],"length":1,"stats":{"Line":0},"fn_name":null},{"line":157,"address":[2973317],"length":1,"stats":{"Line":0},"fn_name":null},{"line":165,"address":[2972808,2972050,2972158],"length":1,"stats":{"Line":0},"fn_name":null},{"line":169,"address":[2976558,2976545,2974536,2974587],"length":1,"stats":{"Line":0},"fn_name":null},{"line":171,"address":[2974848,2974918],"length":1,"stats":{"Line":0},"fn_name":null},{"line":173,"address":[2975128],"length":1,"stats":{"Line":0},"fn_name":null},{"line":175,"address":[2975216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":177,"address":[2975767,2975531],"length":1,"stats":{"Line":0},"fn_name":null},{"line":182,"address":[2975383,2975667,2976526,2976513,2975802],"length":1,"stats":{"Line":0},"fn_name":null},{"line":185,"address":[3118741,3104752,3109989],"length":1,"stats":{"Line":0},"fn_name":null},{"line":188,"address":[3104846],"length":1,"stats":{"Line":0},"fn_name":null},{"line":190,"address":[3105063],"length":1,"stats":{"Line":0},"fn_name":null},{"line":191,"address":[3105049],"length":1,"stats":{"Line":0},"fn_name":null},{"line":194,"address":[3105087,3105150],"length":1,"stats":{"Line":0},"fn_name":null},{"line":196,"address":[3105244],"length":1,"stats":{"Line":0},"fn_name":null},{"line":199,"address":[3105176],"length":1,"stats":{"Line":0},"fn_name":null},{"line":203,"address":[3105280],"length":1,"stats":{"Line":0},"fn_name":null},{"line":205,"address":[3105496,3105353],"length":1,"stats":{"Line":0},"fn_name":null},{"line":207,"address":[3105504],"length":1,"stats":{"Line":0},"fn_name":null},{"line":208,"address":[3105561],"length":1,"stats":{"Line":0},"fn_name":null},{"line":209,"address":[3105626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":211,"address":[3105691],"length":1,"stats":{"Line":0},"fn_name":null},{"line":213,"address":[3105756,3105872],"length":1,"stats":{"Line":0},"fn_name":null},{"line":215,"address":[3116024],"length":1,"stats":{"Line":0},"fn_name":null},{"line":217,"address":[3116155],"length":1,"stats":{"Line":0},"fn_name":null},{"line":219,"address":[3116403],"length":1,"stats":{"Line":0},"fn_name":null},{"line":220,"address":[3116505],"length":1,"stats":{"Line":0},"fn_name":null},{"line":223,"address":[3116652,3116451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":225,"address":[3116685],"length":1,"stats":{"Line":0},"fn_name":null},{"line":226,"address":[3116788,3118400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":229,"address":[2977317,2977312],"length":1,"stats":{"Line":0},"fn_name":"{closure#0}"},{"line":230,"address":[2977344,2977349],"length":1,"stats":{"Line":0},"fn_name":"{closure#1}"},{"line":232,"address":[3117001],"length":1,"stats":{"Line":0},"fn_name":null},{"line":234,"address":[3117086],"length":1,"stats":{"Line":0},"fn_name":null},{"line":238,"address":[3117158,3117229],"length":1,"stats":{"Line":0},"fn_name":null},{"line":240,"address":[3117287],"length":1,"stats":{"Line":0},"fn_name":null},{"line":241,"address":[3117429,3117936,3118093],"length":1,"stats":{"Line":0},"fn_name":null},{"line":244,"address":[3117564,3117359],"length":1,"stats":{"Line":0},"fn_name":null},{"line":246,"address":[3117833,3117909],"length":1,"stats":{"Line":0},"fn_name":null},{"line":250,"address":[3106185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":252,"address":[3115184,3106254,3106362],"length":1,"stats":{"Line":0},"fn_name":null},{"line":255,"address":[3106551],"length":1,"stats":{"Line":0},"fn_name":null},{"line":256,"address":[3106561],"length":1,"stats":{"Line":0},"fn_name":null},{"line":257,"address":[3114479,3114403,3114673],"length":1,"stats":{"Line":0},"fn_name":null},{"line":259,"address":[3114697,3115216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":261,"address":[3115307],"length":1,"stats":{"Line":0},"fn_name":null},{"line":262,"address":[3115814,3115410],"length":1,"stats":{"Line":0},"fn_name":null},{"line":264,"address":[2977408,2977413,2977376,2977381],"length":1,"stats":{"Line":0},"fn_name":"{closure#2}"},{"line":266,"address":[3115706,3115621],"length":1,"stats":{"Line":0},"fn_name":null},{"line":267,"address":[3115747,3115680],"length":1,"stats":{"Line":0},"fn_name":null},{"line":270,"address":[3114652],"length":1,"stats":{"Line":0},"fn_name":null},{"line":272,"address":[3114753],"length":1,"stats":{"Line":0},"fn_name":null},{"line":273,"address":[3115076,3115127],"length":1,"stats":{"Line":0},"fn_name":null},{"line":278,"address":[3106583,3106216],"length":1,"stats":{"Line":0},"fn_name":null},{"line":280,"address":[3106637],"length":1,"stats":{"Line":0},"fn_name":null},{"line":281,"address":[3106618,3106735],"length":1,"stats":{"Line":0},"fn_name":null},{"line":284,"address":[3113756,3106737,3106848],"length":1,"stats":{"Line":0},"fn_name":null},{"line":286,"address":[3111771,3107144],"length":1,"stats":{"Line":0},"fn_name":null},{"line":291,"address":[3111810,3111873],"length":1,"stats":{"Line":0},"fn_name":null},{"line":293,"address":[3114257,3111953,3112092],"length":1,"stats":{"Line":0},"fn_name":null},{"line":296,"address":[3111879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":297,"address":[3112025,3111980],"length":1,"stats":{"Line":0},"fn_name":null},{"line":301,"address":[3112357,3112058],"length":1,"stats":{"Line":0},"fn_name":null},{"line":303,"address":[3112485,3112938],"length":1,"stats":{"Line":0},"fn_name":null},{"line":305,"address":[3114235,3113018,3113050],"length":1,"stats":{"Line":0},"fn_name":null},{"line":306,"address":[3112944,3113045],"length":1,"stats":{"Line":0},"fn_name":null},{"line":311,"address":[3112451,3112529],"length":1,"stats":{"Line":0},"fn_name":null},{"line":313,"address":[3112676,3112609],"length":1,"stats":{"Line":0},"fn_name":null},{"line":314,"address":[3112535],"length":1,"stats":{"Line":0},"fn_name":null},{"line":318,"address":[3113291,3113366,3112636],"length":1,"stats":{"Line":0},"fn_name":null},{"line":320,"address":[3113299,3113399],"length":1,"stats":{"Line":0},"fn_name":null},{"line":322,"address":[3113628,3113862],"length":1,"stats":{"Line":0},"fn_name":null},{"line":324,"address":[3113906],"length":1,"stats":{"Line":0},"fn_name":null},{"line":326,"address":[3113971,3114046,3113922],"length":1,"stats":{"Line":0},"fn_name":null},{"line":328,"address":[3113948],"length":1,"stats":{"Line":0},"fn_name":null},{"line":333,"address":[3107178],"length":1,"stats":{"Line":0},"fn_name":null},{"line":334,"address":[3107415,3107288],"length":1,"stats":{"Line":0},"fn_name":null},{"line":335,"address":[3107569,3107442],"length":1,"stats":{"Line":0},"fn_name":null},{"line":337,"address":[2977440,2977483],"length":1,"stats":{"Line":0},"fn_name":"{closure#4}"},{"line":338,"address":[3107699],"length":1,"stats":{"Line":0},"fn_name":null},{"line":340,"address":[2977527,2977504],"length":1,"stats":{"Line":0},"fn_name":"{closure#5}"},{"line":342,"address":[3108225,3108009],"length":1,"stats":{"Line":0},"fn_name":null},{"line":344,"address":[3111033,3111365,3108249,3111687],"length":1,"stats":{"Line":0},"fn_name":null},{"line":346,"address":[3111692,3111400,3111072],"length":1,"stats":{"Line":0},"fn_name":null},{"line":350,"address":[3111038,3111117,3111370],"length":1,"stats":{"Line":0},"fn_name":null},{"line":354,"address":[2977600,2977643],"length":1,"stats":{"Line":0},"fn_name":"{closure#6}"},{"line":355,"address":[3108306],"length":1,"stats":{"Line":0},"fn_name":null},{"line":357,"address":[2977664,2977707],"length":1,"stats":{"Line":0},"fn_name":"{closure#7}"},{"line":358,"address":[3108430],"length":1,"stats":{"Line":0},"fn_name":null},{"line":360,"address":[2977751,2977728],"length":1,"stats":{"Line":0},"fn_name":"{closure#8}"},{"line":361,"address":[2977824,2977847],"length":1,"stats":{"Line":0},"fn_name":"{closure#9}"},{"line":363,"address":[3109319,3108988],"length":1,"stats":{"Line":0},"fn_name":null},{"line":365,"address":[3109605,3110293,3109343],"length":1,"stats":{"Line":0},"fn_name":null},{"line":367,"address":[3110995,3110006,3109644],"length":1,"stats":{"Line":0},"fn_name":null},{"line":371,"address":[3109967,3109610,3109689],"length":1,"stats":{"Line":0},"fn_name":null},{"line":374,"address":[3110314,3110646,3110968,3109937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":376,"address":[3110681,3110353,3110973],"length":1,"stats":{"Line":0},"fn_name":null},{"line":380,"address":[3110651,3110398,3110319],"length":1,"stats":{"Line":0},"fn_name":null},{"line":384,"address":[3109181],"length":1,"stats":{"Line":0},"fn_name":null},{"line":388,"address":[3119686,3118784,3121723],"length":1,"stats":{"Line":0},"fn_name":null},{"line":390,"address":[3118807],"length":1,"stats":{"Line":0},"fn_name":null},{"line":392,"address":[3118937],"length":1,"stats":{"Line":0},"fn_name":null},{"line":395,"address":[3118871],"length":1,"stats":{"Line":0},"fn_name":null},{"line":399,"address":[3118981],"length":1,"stats":{"Line":0},"fn_name":null},{"line":401,"address":[3119085,3119170],"length":1,"stats":{"Line":0},"fn_name":null},{"line":403,"address":[3119185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":405,"address":[3119263,3119312],"length":1,"stats":{"Line":0},"fn_name":null},{"line":407,"address":[3118799],"length":1,"stats":{"Line":0},"fn_name":null},{"line":408,"address":[3119384,3119481],"length":1,"stats":{"Line":0},"fn_name":null},{"line":412,"address":[3119286,3119695,3121758],"length":1,"stats":{"Line":0},"fn_name":null},{"line":413,"address":[3120026],"length":1,"stats":{"Line":0},"fn_name":null},{"line":414,"address":[3120201,3120130],"length":1,"stats":{"Line":0},"fn_name":null},{"line":416,"address":[3120236,3120390],"length":1,"stats":{"Line":0},"fn_name":null},{"line":417,"address":[3120296,3120560],"length":1,"stats":{"Line":0},"fn_name":null},{"line":420,"address":[3120529,3120768],"length":1,"stats":{"Line":0},"fn_name":null},{"line":422,"address":[3120819],"length":1,"stats":{"Line":0},"fn_name":null},{"line":423,"address":[3120903],"length":1,"stats":{"Line":0},"fn_name":null},{"line":425,"address":[3121242,3121022],"length":1,"stats":{"Line":0},"fn_name":null},{"line":429,"address":[3121736,3121277,3121142],"length":1,"stats":{"Line":0},"fn_name":null},{"line":433,"address":[3125229,3121936,3126207],"length":1,"stats":{"Line":0},"fn_name":null},{"line":435,"address":[3121943],"length":1,"stats":{"Line":0},"fn_name":null},{"line":437,"address":[3122057],"length":1,"stats":{"Line":0},"fn_name":null},{"line":440,"address":[3121991],"length":1,"stats":{"Line":0},"fn_name":null},{"line":444,"address":[3126185,3122093],"length":1,"stats":{"Line":0},"fn_name":null},{"line":446,"address":[3122300,3122229],"length":1,"stats":{"Line":0},"fn_name":null},{"line":448,"address":[3122529,3122634],"length":1,"stats":{"Line":0},"fn_name":null},{"line":450,"address":[3122843],"length":1,"stats":{"Line":0},"fn_name":null},{"line":451,"address":[3122945],"length":1,"stats":{"Line":0},"fn_name":null},{"line":454,"address":[3122891,3123092],"length":1,"stats":{"Line":0},"fn_name":null},{"line":456,"address":[3123117],"length":1,"stats":{"Line":0},"fn_name":null},{"line":457,"address":[3123164,3126041],"length":1,"stats":{"Line":0},"fn_name":null},{"line":460,"address":[3123141,3123278],"length":1,"stats":{"Line":0},"fn_name":null},{"line":462,"address":[3123336],"length":1,"stats":{"Line":0},"fn_name":null},{"line":466,"address":[3123491,3123408],"length":1,"stats":{"Line":0},"fn_name":null},{"line":468,"address":[3123545],"length":1,"stats":{"Line":0},"fn_name":null},{"line":469,"address":[3125763,3123643,3125600],"length":1,"stats":{"Line":0},"fn_name":null},{"line":472,"address":[3123617,3123803],"length":1,"stats":{"Line":0},"fn_name":null},{"line":474,"address":[3123833],"length":1,"stats":{"Line":0},"fn_name":null},{"line":475,"address":[3125238,3125401,3123915],"length":1,"stats":{"Line":0},"fn_name":null},{"line":478,"address":[3123905],"length":1,"stats":{"Line":0},"fn_name":null},{"line":479,"address":[3124203,3124107],"length":1,"stats":{"Line":0},"fn_name":null},{"line":480,"address":[3124210],"length":1,"stats":{"Line":0},"fn_name":null},{"line":481,"address":[3124241],"length":1,"stats":{"Line":0},"fn_name":null},{"line":482,"address":[3124276],"length":1,"stats":{"Line":0},"fn_name":null},{"line":484,"address":[3124409],"length":1,"stats":{"Line":0},"fn_name":null},{"line":487,"address":[3124530,3124822,3124659],"length":1,"stats":{"Line":0},"fn_name":null},{"line":492,"address":[3126224,3127048,3131136],"length":1,"stats":{"Line":0},"fn_name":null},{"line":494,"address":[3126271],"length":1,"stats":{"Line":0},"fn_name":null},{"line":496,"address":[3126346],"length":1,"stats":{"Line":0},"fn_name":null},{"line":498,"address":[3126417],"length":1,"stats":{"Line":0},"fn_name":null},{"line":500,"address":[3126438],"length":1,"stats":{"Line":0},"fn_name":null},{"line":502,"address":[3126687],"length":1,"stats":{"Line":0},"fn_name":null},{"line":504,"address":[3127200],"length":1,"stats":{"Line":0},"fn_name":null},{"line":508,"address":[3126808],"length":1,"stats":{"Line":0},"fn_name":null},{"line":512,"address":[3126508,3126374],"length":1,"stats":{"Line":0},"fn_name":null},{"line":515,"address":[3126518,3127496,3127603],"length":1,"stats":{"Line":0},"fn_name":null},{"line":517,"address":[3127864],"length":1,"stats":{"Line":0},"fn_name":null},{"line":518,"address":[3127879],"length":1,"stats":{"Line":0},"fn_name":null},{"line":519,"address":[3127938,3128010],"length":1,"stats":{"Line":0},"fn_name":null},{"line":520,"address":[3128386,3128084],"length":1,"stats":{"Line":0},"fn_name":null},{"line":522,"address":[3129989,3128410],"length":1,"stats":{"Line":0},"fn_name":null},{"line":524,"address":[3130339,3130061,3130212],"length":1,"stats":{"Line":0},"fn_name":null},{"line":527,"address":[3130012,3130591],"length":1,"stats":{"Line":0},"fn_name":null},{"line":529,"address":[3130751,3130618,3130872],"length":1,"stats":{"Line":0},"fn_name":null},{"line":532,"address":[3128475,3128273,3128586],"length":1,"stats":{"Line":0},"fn_name":null},{"line":533,"address":[3128982,3129093,3128847],"length":1,"stats":{"Line":0},"fn_name":null},{"line":534,"address":[3129354,3129508],"length":1,"stats":{"Line":0},"fn_name":null},{"line":536,"address":[3129874],"length":1,"stats":{"Line":0},"fn_name":null},{"line":539,"address":[2978025],"length":1,"stats":{"Line":0},"fn_name":null},{"line":541,"address":[2978104],"length":1,"stats":{"Line":0},"fn_name":null},{"line":544,"address":[2978171],"length":1,"stats":{"Line":0},"fn_name":null},{"line":547,"address":[2768232],"length":1,"stats":{"Line":0},"fn_name":null},{"line":549,"address":[2978930,2979021],"length":1,"stats":{"Line":0},"fn_name":null},{"line":551,"address":[2979118],"length":1,"stats":{"Line":0},"fn_name":null},{"line":554,"address":[2979047],"length":1,"stats":{"Line":0},"fn_name":null},{"line":558,"address":[2979185],"length":1,"stats":{"Line":0},"fn_name":null},{"line":560,"address":[2979297,2979419],"length":1,"stats":{"Line":0},"fn_name":null},{"line":562,"address":[2979632],"length":1,"stats":{"Line":0},"fn_name":null},{"line":565,"address":[2981803,2979665,2979571],"length":1,"stats":{"Line":0},"fn_name":null},{"line":567,"address":[2979881,2979958,2983595,2983582,2983635],"length":1,"stats":{"Line":0},"fn_name":null},{"line":568,"address":[2983563,2980732,2980650,2983550],"length":1,"stats":{"Line":0},"fn_name":null},{"line":569,"address":[2768252],"length":1,"stats":{"Line":0},"fn_name":null},{"line":571,"address":[2981350],"length":1,"stats":{"Line":0},"fn_name":null},{"line":572,"address":[2981401,2981562],"length":1,"stats":{"Line":0},"fn_name":null},{"line":574,"address":[2981498,2981775],"length":1,"stats":{"Line":0},"fn_name":null},{"line":577,"address":[2979817,2982099,2981816],"length":1,"stats":{"Line":0},"fn_name":null},{"line":579,"address":[2981997],"length":1,"stats":{"Line":0},"fn_name":null},{"line":580,"address":[2982008],"length":1,"stats":{"Line":0},"fn_name":null},{"line":584,"address":[2982703,2982872,2982815],"length":1,"stats":{"Line":0},"fn_name":null},{"line":587,"address":[2982609],"length":1,"stats":{"Line":0},"fn_name":null},{"line":588,"address":[2982636],"length":1,"stats":{"Line":0},"fn_name":null},{"line":589,"address":[2982663],"length":1,"stats":{"Line":0},"fn_name":null},{"line":593,"address":[2982790,2982842],"length":1,"stats":{"Line":0},"fn_name":null},{"line":594,"address":[2983123,2983509,2982999,2983078,2983522],"length":1,"stats":{"Line":0},"fn_name":null},{"line":595,"address":[2768275],"length":1,"stats":{"Line":0},"fn_name":null},{"line":600,"address":[2983904],"length":1,"stats":{"Line":0},"fn_name":"log_stats<hyper::body::body::Body>"},{"line":609,"address":[2984505,2984387],"length":1,"stats":{"Line":0},"fn_name":null},{"line":611,"address":[2985536,2985763,2984524,2985606,2985726,2985561,2986130,2985890],"length":1,"stats":{"Line":0},"fn_name":"{async_block#0}<hyper::body::body::Body>"},{"line":613,"address":[2985599,2985946,2985810,2985614,2985753],"length":1,"stats":{"Line":0},"fn_name":null},{"line":617,"address":[2739012],"length":1,"stats":{"Line":0},"fn_name":null},{"line":620,"address":[3131184,3132920,3132819],"length":1,"stats":{"Line":1},"fn_name":"hits_by_hour_text_graph"},{"line":622,"address":[3131245],"length":1,"stats":{"Line":1},"fn_name":null},{"line":624,"address":[3131266],"length":1,"stats":{"Line":1},"fn_name":null},{"line":625,"address":[3131538,3131277,3131404,3132915],"length":1,"stats":{"Line":4},"fn_name":null},{"line":627,"address":[3131559,3132849],"length":1,"stats":{"Line":2},"fn_name":null},{"line":630,"address":[3131506,3131855,3131611],"length":1,"stats":{"Line":3},"fn_name":null},{"line":632,"address":[3131887],"length":1,"stats":{"Line":1},"fn_name":null},{"line":634,"address":[3132094,3132342],"length":1,"stats":{"Line":2},"fn_name":null},{"line":635,"address":[3132602],"length":1,"stats":{"Line":1},"fn_name":null},{"line":636,"address":[3132787],"length":1,"stats":{"Line":1},"fn_name":null},{"line":639,"address":[3131805],"length":1,"stats":{"Line":1},"fn_name":null}],"covered":11,"coverable":247},{"path":["/","home","runner","work","Busser","Busser","src","web","throttle.rs"],"content":"use std::collections::HashMap;\nuse std::net::{SocketAddr, Ipv4Addr, IpAddr};\nuse std::time::{Instant, Duration};\nuse std::sync::Arc;\nuse openssl::sha::{self, sha512};\nuse tokio::sync::Mutex;\n\nuse axum::\n{\n    http::{self, StatusCode}, \n    response::Response, \n    extract::{State, ConnectInfo},\n    middleware::Next\n};\n\n#[derive(PartialEq, Eq, Hash, Clone, Debug)]\npub struct Request\n{\n    hash: [u8; 64]\n}\n\nimpl Request\n{\n    pub fn new(ip: Ipv4Addr, uri: &str) -> Request\n    {\n        Request { hash: sha512(&[uri.as_bytes(), &ip.octets()].concat()) }\n    }\n}\n\npub struct RequestData\n{\n    count: u32,\n    last_request_time: Instant,\n    timeout: bool\n}\n\nimpl RequestData\n{\n    pub fn clone(&self) -> RequestData\n    {\n        RequestData { count: self.count.clone(), last_request_time: self.last_request_time.clone(), timeout: false }\n    }\n}\n\npub struct IpThrottler\n{\n    requests_from: HashMap<Request, RequestData>,\n    max_requests_per_second: f64,\n    timeout_millis: u128,\n    clear_period: Duration,\n    last_clear: Instant \n}\n\nimpl IpThrottler\n{\n    pub fn new(max_requests_per_second: f64, timeout_millis: u128, clear_period_seconds: u64) -> IpThrottler\n    {\n        IpThrottler \n        {\n            requests_from: HashMap::new(), \n            max_requests_per_second: max_requests_per_second,\n            timeout_millis: timeout_millis,\n            clear_period: Duration::from_secs(clear_period_seconds),\n            last_clear: Instant::now()\n        }\n    }\n\n    pub fn check_clear(&mut self)\n    {\n        if self.last_clear.elapsed() > self.clear_period\n        {\n            self.requests_from.clear();\n            self.last_clear = Instant::now();\n        }\n    }\n\n    pub fn is_limited(&mut self, addr: SocketAddr, uri: &str) -> bool\n    {\n        let ip = addr.ip();\n        let ipv4: Ipv4Addr;\n    \n        match ip \n        {\n            IpAddr::V4(ip4) => {ipv4 = ip4}\n            IpAddr::V6(_ip6) => {return true}\n        }\n\n        let request = Request::new(ipv4, uri);\n\n        println!(\"{:?}\", request);\n    \n        let requests = if self.requests_from.contains_key(&request)\n        {\n            self.requests_from[&request].clone()\n        }\n        else \n        {\n            self.requests_from.insert(request.clone(), RequestData {count: 0 as u32, last_request_time: Instant::now(), timeout: false});\n            self.requests_from[&request].clone()\n        };\n\n        let time = requests.last_request_time.elapsed().as_millis();\n        let requests_per_second = requests.count as f64 / (time as f64 / 1000.0);\n\n        if requests.timeout || requests_per_second > self.max_requests_per_second\n        {\n            if time < self.timeout_millis\n            {\n                *self.requests_from.get_mut(&request).unwrap() = RequestData {count: requests.count, last_request_time: requests.last_request_time, timeout: true};\n                return true\n            }\n            else \n            {\n                *self.requests_from.get_mut(&request).unwrap() = RequestData {count: 0, last_request_time: Instant::now(), timeout: false};\n                return false\n            }\n        }\n\n        if time < 1000\n        {\n            *self.requests_from.get_mut(&request).unwrap() = RequestData {count: requests.count+1, last_request_time: requests.last_request_time, timeout: false};\n        }\n        else \n        {\n            *self.requests_from.get_mut(&request).unwrap() = RequestData {count: 0, last_request_time: Instant::now(), timeout: false};\n        }\n        return false\n    }\n}\n\npub async fn handle_throttle<B>\n(\n    ConnectInfo(addr): ConnectInfo<SocketAddr>,\n    State(state): State<Arc<Mutex<IpThrottler>>>,\n    request: http::Request<B>,\n    next: Next<B>\n) -> Result<Response, StatusCode>\n{\n    let serve_start = Instant::now();\n    {\n        let mut throttler = state.lock().await;\n        throttler.check_clear();\n        if throttler.is_limited(addr, &request.uri().to_string())\n        {\n            crate::debug(format!(\"Denying: {} @/{}\", addr, request.uri().to_string()), None);\n            crate::debug(format!(\"Serve time:               {} s\", serve_start.elapsed().as_secs_f64()), Some(\"PERFORMANCE\".to_string()));\n            Err(StatusCode::TOO_MANY_REQUESTS)\n        }\n        else \n        {\n            crate::debug(format!(\"Allowing: {} @/{}\", addr, request.uri().to_string()), None);\n            let response = next.run(request).await;\n            crate::debug(format!(\"Serve time:               {} s\", serve_start.elapsed().as_secs_f64()), Some(\"PERFORMANCE\".to_string()));\n            Ok(response)\n        }\n    }\n    \n}\n","traces":[{"line":24,"address":[3452037,3451712],"length":1,"stats":{"Line":0},"fn_name":null},{"line":26,"address":[3451787,3451984],"length":1,"stats":{"Line":0},"fn_name":null},{"line":39,"address":[3452064],"length":1,"stats":{"Line":0},"fn_name":null},{"line":41,"address":[3452094],"length":1,"stats":{"Line":0},"fn_name":null},{"line":56,"address":[3452432,3452144],"length":1,"stats":{"Line":0},"fn_name":null},{"line":60,"address":[3452215],"length":1,"stats":{"Line":0},"fn_name":null},{"line":63,"address":[3452234],"length":1,"stats":{"Line":0},"fn_name":null},{"line":64,"address":[3452308],"length":1,"stats":{"Line":0},"fn_name":null},{"line":68,"address":[3452464],"length":1,"stats":{"Line":0},"fn_name":null},{"line":70,"address":[3452478,3452558],"length":1,"stats":{"Line":0},"fn_name":null},{"line":72,"address":[3452527],"length":1,"stats":{"Line":0},"fn_name":null},{"line":73,"address":[3452537],"length":1,"stats":{"Line":0},"fn_name":null},{"line":77,"address":[3452560],"length":1,"stats":{"Line":0},"fn_name":null},{"line":79,"address":[3452606],"length":1,"stats":{"Line":0},"fn_name":null},{"line":82,"address":[3452616],"length":1,"stats":{"Line":0},"fn_name":null},{"line":84,"address":[3452645],"length":1,"stats":{"Line":0},"fn_name":null},{"line":85,"address":[3452849],"length":1,"stats":{"Line":0},"fn_name":null},{"line":88,"address":[3452653],"length":1,"stats":{"Line":0},"fn_name":null},{"line":90,"address":[3452750],"length":1,"stats":{"Line":0},"fn_name":null},{"line":92,"address":[3452824],"length":1,"stats":{"Line":0},"fn_name":null},{"line":94,"address":[3453037],"length":1,"stats":{"Line":0},"fn_name":null},{"line":98,"address":[3452884],"length":1,"stats":{"Line":0},"fn_name":null},{"line":99,"address":[3452991],"length":1,"stats":{"Line":0},"fn_name":null},{"line":102,"address":[3453076],"length":1,"stats":{"Line":0},"fn_name":null},{"line":103,"address":[3453159],"length":1,"stats":{"Line":0},"fn_name":null},{"line":105,"address":[3453226],"length":1,"stats":{"Line":0},"fn_name":null},{"line":107,"address":[3453269],"length":1,"stats":{"Line":0},"fn_name":null},{"line":109,"address":[3453904,3454032],"length":1,"stats":{"Line":0},"fn_name":null},{"line":110,"address":[3454067],"length":1,"stats":{"Line":0},"fn_name":null},{"line":114,"address":[3453733,3453854],"length":1,"stats":{"Line":0},"fn_name":null},{"line":115,"address":[3453889],"length":1,"stats":{"Line":0},"fn_name":null},{"line":119,"address":[3453683,3453304,3453479],"length":1,"stats":{"Line":0},"fn_name":null},{"line":121,"address":[3453481,3453648,3453688,3453527],"length":1,"stats":{"Line":0},"fn_name":null},{"line":125,"address":[3453444,3453323],"length":1,"stats":{"Line":0},"fn_name":null},{"line":127,"address":[3453508],"length":1,"stats":{"Line":0},"fn_name":null},{"line":131,"address":[2807936],"length":1,"stats":{"Line":0},"fn_name":"handle_throttle<hyper::body::body::Body>"},{"line":139,"address":[2808665,2808482],"length":1,"stats":{"Line":0},"fn_name":null},{"line":141,"address":[2741103],"length":1,"stats":{"Line":0},"fn_name":null},{"line":142,"address":[2809223,2809130],"length":1,"stats":{"Line":0},"fn_name":null},{"line":143,"address":[2812455,2809234],"length":1,"stats":{"Line":0},"fn_name":null},{"line":145,"address":[2810384,2810496,2810626],"length":1,"stats":{"Line":0},"fn_name":null},{"line":146,"address":[2811137,2811464,2810924,2811003,2811451],"length":1,"stats":{"Line":0},"fn_name":null},{"line":147,"address":[2811400],"length":1,"stats":{"Line":0},"fn_name":null},{"line":149,"address":[],"length":0,"stats":{"Line":0},"fn_name":null},{"line":151,"address":[2809546,2809806,2809664],"length":1,"stats":{"Line":0},"fn_name":null},{"line":152,"address":[2741129],"length":1,"stats":{"Line":0},"fn_name":null},{"line":153,"address":[2812006,2812841,2812851,2812140,2811927],"length":1,"stats":{"Line":0},"fn_name":null},{"line":154,"address":[2812403],"length":1,"stats":{"Line":0},"fn_name":null}],"covered":0,"coverable":48},{"path":["/","home","runner","work","Busser","Busser","tests","common","mod.rs"],"content":"","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","tests","test_page_load.rs"],"content":"mod common;\n\n#[cfg(test)]\nmod test_page_load\n{\n    use busser::pages::{page::Page, get_pages};\n\n    #[test]\n    fn test_read_pages()\n    {\n        let pages = get_pages(Some(\"tests/pages\"), None);\n\n        assert_eq!(pages.len(), 3);\n\n        assert!(pages.contains(&Page::new(\"tests/pages/a.html\", \"this is /a\", 3600)));\n\n        assert!(pages.contains(&Page::new(\"tests/pages/b.html\", \"this is /b\", 3600)));\n\n        assert!(pages.contains(&Page::new(\"tests/pages/c/d.html\", \"this is /c/d\", 3600)));\n    }\n\n}","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","tests","test_regex.rs"],"content":"mod common;\n\n#[cfg(test)]\nmod page_regex\n{\n    use busser::pages::page::is_page;\n\n\n    #[test]\n    fn test_is_page()\n    {\n        assert!(is_page(\"http://domain\", \"domain\"));\n        assert!(is_page(\"http://domain/\", \"domain\"));\n        assert!(is_page(\"http://domain/something\", \"domain\"));\n        assert!(is_page(\"http://domain/something.html\", \"domain\"));\n\n        assert!(!is_page(\"http://other\", \"domain\"));\n        assert!(!is_page(\"http://other/\", \"domain\"));\n        assert!(!is_page(\"http://other/something\", \"domain\"));\n        assert!(!is_page(\"http://other/something.html\", \"domain\"));\n\n        assert!(is_page(\"http://sub.domain\", \"sub.domain\"));\n        assert!(is_page(\"http://sub.sub.domain\", \"sub.sub.domain\"));\n        assert!(is_page(\"http://sub.domain/\", \"sub.domain\"));\n        assert!(is_page(\"http://sub.sub.domain/\", \"sub.sub.domain\"));\n\n        assert!(is_page(\"http://sub.domain/a\", \"sub.domain\"));\n        assert!(is_page(\"http://sub.sub.domain/a\", \"sub.sub.domain\"));\n        assert!(is_page(\"http://sub.domain/a\", \"sub.domain\"));\n        assert!(is_page(\"http://sub.sub.domain/a\", \"sub.sub.domain\"));\n\n        assert!(!is_page(\"http://domain.\", \"domain\"));\n        assert!(!is_page(\"http://domain/a.b\", \"domain\"));\n        assert!(!is_page(\"http://domain/something.h\", \"domain\"));\n        assert!(!is_page(\"http://domain/something.abc\", \"domain\"));\n\n        assert!(!is_page(\"https://domain.\", \"domain\"));\n        assert!(!is_page(\"https://domain/a.b\", \"domain\"));\n        assert!(!is_page(\"https://domain/something.h\", \"domain\"));\n        assert!(!is_page(\"https://domain/something.abc\", \"domain\"));\n\n        assert!(!is_page(\"https://domain.\", \"https://domain\"));\n        assert!(!is_page(\"https://domain/a.b\", \"https://domain\"));\n        assert!(!is_page(\"https://domain/something.h\", \"http://domain\"));\n        assert!(!is_page(\"https://domain/something.abc\", \"http://domain\"));\n\n        \n        assert!(is_page(\"domain\", \"domain\"));\n        assert!(is_page(\"domain/\", \"domain\"));\n        assert!(is_page(\"domain/something\", \"domain\"));\n        assert!(is_page(\"domain/something.html\", \"domain\"));\n\n        assert!(!is_page(\"other\", \"domain\"));\n        assert!(!is_page(\"other/\", \"domain\"));\n        assert!(!is_page(\"other/something\", \"domain\"));\n        assert!(!is_page(\"other/something.html\", \"domain\"));\n\n        assert!(is_page(\"sub.domain\", \"sub.domain\"));\n        assert!(is_page(\"sub.sub.domain\", \"sub.sub.domain\"));\n        assert!(is_page(\"sub.domain/\", \"sub.domain\"));\n        assert!(is_page(\"sub.sub.domain/\", \"sub.sub.domain\"));\n\n        assert!(is_page(\"sub.domain/a\", \"sub.domain\"));\n        assert!(is_page(\"sub.sub.domain/a\", \"sub.sub.domain\"));\n        assert!(is_page(\"sub.domain/a\", \"sub.domain\"));\n        assert!(is_page(\"sub.sub.domain/a\", \"sub.sub.domain\"));\n\n        assert!(!is_page(\"domain.\", \"domain\"));\n        assert!(!is_page(\"domain/a.b\", \"domain\"));\n        assert!(!is_page(\"domain/something.h\", \"domain\"));\n        assert!(!is_page(\"domain/something.abc\", \"domain\"));\n\n        assert!(!is_page(\"domain.\", \"domain\"));\n        assert!(!is_page(\"domain/a.b\", \"domain\"));\n        assert!(!is_page(\"domain/something.h\", \"domain\"));\n        assert!(!is_page(\"domain/something.abc\", \"domain\"));\n\n        assert!(!is_page(\"domain.\", \"http://domain\"));\n        assert!(!is_page(\"domain/a.b\", \"https://domain\"));\n        assert!(!is_page(\"domain/something.h\", \"http://domain\"));\n        assert!(!is_page(\"domain/something.abc\", \"https://domain\"));\n\n    }\n\n}","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","tests","test_stats_graph.rs"],"content":"mod common;\n\n#[cfg(test)]\nmod test_stats_graph\n{\n    use busser::web::stats::hits_by_hour_text_graph;\n\n    const GRAPH: &str = r#\"00:00\n01:00-\n02:00--\n03:00---\n04:00----\n05:00-----\n06:00------\n07:00-------\n08:00--------\n09:00---------\n10:00----------\n11:00------------\n12:00-------------\n13:00--------------\n14:00---------------\n15:00----------------\n16:00-----------------\n17:00------------------\n18:00-------------------\n19:00--------------------\n20:00---------------------\n21:00----------------------\n22:00------------------------\n23:00-------------------------\n\"#;\n\n    #[test]\n    fn test_text_graph()\n    {\n        let hits: [u16; 24] = core::array::from_fn(|i| i as u16);\n        let graph = hits_by_hour_text_graph(hits, '-', 24);\n        println!(\"{}\", graph);\n        assert_eq!(graph, GRAPH);\n    }\n\n}","traces":[],"covered":0,"coverable":0},{"path":["/","home","runner","work","Busser","Busser","tests","text_content_type.rs"],"content":"mod common;\n\n#[cfg(test)]\nmod test_Resource_load\n{\n    use busser::resources::{get_resources, resource::Resource};\n\n    #[test]\n    fn test_content_types()\n    {\n        let resources = get_resources(Some(\"tests/pages/data\"), None);\n\n        assert_eq!(resources.len(), 19);\n\n        println!(\"{:?}\", resources);\n\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/b.txt\", vec![], \"text/plain\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/css.css\", vec![], \"text/css\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/csv.csv\", vec![], \"text/csv\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/gif.gif\", vec![], \"image/gif\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/ico.ico\", vec![], \"image/x-icon\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/jpg.jpg\", vec![], \"image/jpeg\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/js.js\", vec![], \"text/javascript\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/mp4.gif\", vec![], \"image/gif\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/mp4.mp4\", vec![], \"video/mp4\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/png.jpg\", vec![], \"image/jpeg\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/png.png\", vec![], \"image/png\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/qt.mov\", vec![], \"video/quicktime\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/svg.svg\", vec![], \"image/svg+xml\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/tiff.tiff\", vec![], \"image/tiff\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/vid.flv\", vec![], \"video/x-flv\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/vid.webm\", vec![], \"video/webm\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/vid.wmv\", vec![], \"video/x-ms-wmv\", 3600)));\n        assert!(resources.contains(&Resource::new(\"tests/pages/data/xml.xml\", vec![], \"text/xml\", 3600)));\n    }\n\n}","traces":[],"covered":0,"coverable":0}]}